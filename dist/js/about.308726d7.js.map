{"version":3,"sources":["webpack:///./node_modules/rtcmulticonnection/dist/RTCMultiConnection.js","webpack:///./src/views/TitleScreen.vue?bcdb","webpack:///./src/views/TitleScreen.vue?7771","webpack:///./src/views/TitleScreen.vue?88c7","webpack:///./src/views/TitleScreen.vue","webpack:///./node_modules/process/browser.js"],"names":["global","process","__WEBPACK_AMD_DEFINE_ARRAY__","__WEBPACK_AMD_DEFINE_RESULT__","RTCMultiConnection","roomid","forceOptions","browserFakeUserAgent","SocketConnection","connection","connectCallback","isData","session","audio","video","screen","data","parameters","userid","sessionid","socketMessageEvent","socketCustomEvent","autoCloseEntireSession","broadcast","maxParticipantsAllowed","enableScalableBroadcast","maxRelayLimitPerUser","JSON","stringify","extra","socketCustomParameters","io","sockets","e","socketURL","substr","length","enableLogs","console","info","location","origin","socket","connect","socketOptions","mPeer","multiPeersHandler","updateExtraBackup","remoteUserId","peersBackup","onMessageEvent","message","peers","sender","onExtraDataUpdated","streamSyncNeeded","stream","streamEvents","streamid","action","onstreamended","type","allParticipants","indexOf","push","forEach","participant","localPeerSdpConstraints","OfferToReceiveAudio","sdpConstraints","mandatory","OfferToReceiveVideo","remotePeerSdpConstraints","oneway","isOneWay","direction","isDataOnly","newParticipant","createNewPeer","userPreferences","readyForOffer","attachStreams","waitingForLocalMedia","setTimeout","newParticipationRequest","deletePeer","dontGetRemoteStream","dontAttachLocalStream","connectionDescription","successCallback","onNewParticipant","changedUUID","oldUUID","newUUID","userLeft","onUserLeft","leave","addNegotiatedMessage","on","alreadyConnected","resetProps","emit","event","onSocketDisconnect","onSocketError","onUserStatusChanged","status","onEntireSessionClosed","useridAlreadyTaken","yourNewUserId","onUserIdAlreadyTaken","log","debug","onNumberOfBroadcastViewersUpdated","isInitiator","MultiPeers","self","this","skipPeers","initFileBufferReader","fbr","FileBufferReader","onProgress","chunk","onFileProgress","onBegin","file","onFileStart","onEnd","onFileEnd","getLength","numberOfPeers","peer","selectFirst","firstPeer","getAllParticipants","allPeers","callbcak","send","that","isNull","size","enableFileSharing","shareFile","ArrayBuffer","DataView","remoteUser","channels","channel","createDataChannel","renegotiate","TextSender","text","uuid","getLocalConfig","remoteSdp","streamsToShare","rtcMultiConnection","renegotiatingPeer","peerRef","onLocalSdp","localSdp","onNegotiationNeeded","onLocalCandidate","localCandidate","OnIceCandidateHandler","processCandidates","onDataChannelMessage","convertToObject","object","readyForNextChunk","getNextChunk","nextChunk","isLastChunk","chunkMissing","addChunk","promptNextChunk","onDataChannelError","error","onDataChannelOpened","onDataChannelClosed","onRemoteStream","streams","onGettingRemoteMedia","onRemoteStreamRemoved","onRemovingRemoteMedia","onPeerStateChanged","states","iceConnectionState","onNegotiationStarted","onNegotiationCompleted","search","disconnectWith","enableMedia","setUserPreferences","localConfig","PeerInitiator","createAnsweringPeer","renegotiatePeer","replaceTrack","track","isVideoTrack","getSenders","rtpSender","kind","lastVideoTrack","lastAudioTrack","warn","sdp","addRemoteSdp","candidate","addRemoteCandidate","isAudio","isVideo","isScreen","onReadyForOffer","onGettingLocalMedia","localStream","onLocalMediaError","constraints","onMediaError","readAsArrayBuffer","arrayOfUsers","chunkSize","DetectRTC","browser","name","textReceiver","TextReceiver","receive","parse","onclose","onerror","onopen","state","getRemoteStreams","fireEvent","obj","eventName","args","CustomEvent","eventDetail","arguments","__exposedProps__","dispatchEvent","setHarkEvents","streamEvent","getTracks","onspeaking","onsilence","hark","onvolumechange","volume","threshold","merge","setMuteHandlers","addEventListener","muteType","onmute","unmuteType","onunmute","getRandomString","window","crypto","getRandomValues","navigator","userAgent","a","Uint32Array","token","i","l","toString","Math","random","Date","getTime","replace","getRMCMediaElement","callback","autoCreateMediaElement","isAudioOnly","mediaElement","document","createElement","srcObject","setAttribute","streamEndedEvent","currentUserMediaRequest","remove","idInstance","StreamsHandler","onSyncNeeded","aStream","idx","newStreamsArray","parentNode","removeChild","played","play","cbFired","then","catch","listenEventHandler","eventHandler","removeEventListener","removeNullEntries","array","newArray","item","isString","getUserMedia","captureStream","mozCaptureStream","getContext","pause","drawImage","toDataURL","HTMLVideoElement","HTMLMediaElement","protocol","href","hash","width","height","URL","createObjectURL","revokeObjectURL","isNodejs","versions","node","version","webkitGetUserMedia","mozGetUserMedia","isMobileDevice","test","isEdge","msSaveOrOpenBlob","msSaveBlob","isOpera","opera","isFirefox","InstallTrigger","isSafari","isChrome","chrome","isIE","documentMode","getBrowserInfo","appVersion","nameOffset","verOffset","ix","nAgt","browserName","appName","fullVersion","parseFloat","majorVersion","parseInt","split","substring","lastIndexOf","toLowerCase","toUpperCase","isNaN","isPrivateBrowsing","retry","isDone","next","currentTrial","maxRetry","isTimeout","id","setInterval","clearInterval","isIE10OrLater","ua","match","exec","detectPrivateMode","isPrivate","webkitRequestFileSystem","TEMPORARY","indexedDB","db","open","readyState","result","localStorage","setItem","removeItem","isMobile","Android","BlackBerry","iOS","Opera","Windows","any","getOsName","osName","detectDesktopOS","cs","unknown","nVer","os","clientStrings","s","r","osVersion","getAndroidVersion","osInfo","isCanvasSupportsStreamCapturing","isVideoSupportsStreamCapturing","regexIpv4Local","regexIpv4","regexIpv6","DetectLocalIPAddress","isWebRTCSupported","isPublic","isIpv4","getIPs","ip","getElementById","ipDuplicates","RTCPeerConnection","mozRTCPeerConnection","webkitRTCPeerConnection","iframe","win","contentWindow","peerConfig","optional","RtpDataChannels","servers","iceServers","urls","pc","addStream","addTrack","onicecandidate","handleCandidate","isPromisesSupported","createOffer","setLocalDescription","afterCreateOffer","ipAddress","undefined","lines","localDescription","line","MediaDevices","audioInputDevices","audioOutputDevices","videoInputDevices","mediaDevices","enumerateDevices","canEnumerate","MediaStreamTrack","hasMicrophone","hasSpeakers","hasWebcam","isWebsiteHasMicrophonePermissions","isWebsiteHasWebcamPermissions","checkDeviceSupport","getSources","bind","alreadyUsedDevices","devices","_device","device","d","deviceId","label","isCustomLabel","domain","isORTCSupported","RTCIceGatherer","isScreenCapturingSupported","isNonLocalHost","webAudio","isSupported","isCreateMediaStreamSourceSupported","prototype","isAudioContextSupported","isRtpDataChannelsSupported","isSCTPSupportd","isSctpDataChannelsSupported","isGetUserMediaSupported","displayResolution","getAspectRatio","w","h","gcd","b","displayAspectRatio","toFixed","isWebSocketsSupported","WebSocket","CLOSING","isWebSocketsBlocked","checkWebSocketsSupport","starttime","websocket","onmessage","WebsocketLatency","close","load","isSetSinkIdSupported","isRTPSenderReplaceTracksSupported","isRemoteStreamProcessingSupported","isApplyConstraintsSupported","isMultiMonitorScreenCapturingSupported","MediaStream","webkitMediaStream","Object","keys","module","exports","apply","cordova","el","attachEvent","attachEventListener","listener","useCapture","isAudioPlusTab","audioPlusTab","filter","t","isUnifiedPlanSupportedDefault","canAddTransceiver","RTCRtpTransceiver","tempPc","addTransceiver","isUnifiedPlanSuppored","isUnifiedPlanSupported","sdpSemantics","config","getConfiguration","setCordovaAPIs","plugins","iosrtc","RTCSessionDescription","RTCIceCandidate","enable","selectAudioOutput","iOSDefaultAudioOutputDevice","registerGlobals","stop","defaults","setSdpConstraints","mozRTCSessionDescription","mozRTCIceCandidate","removeStream","allRemoteStreams","localStreams","iceTransports","candidates","turn","relay","stun","reflexive","host","params","iceTransportPolicy","iceCandidatePoolSize","bundlePolicy","rtcpMuxPolicy","optionalArgument","getReceivers","receiver","getLocalStreams","trickleIce","sdpMid","sdpMLineIndex","beforeAddingStream","oniceconnectionstatechange","onsignalingstatechange","iceGatheringState","signalingState","Array","dontDuplicate","ontrack","onended","onremovestream","streamToShare","onremovetrack","removeTrack","remoteCandidate","addIceCandidate","cb","processSdp","setRemoteDescription","isOfferer","setChannelEvents","binaryType","internalSend","ondatachannel","enableDisableVideoEncoding","rtcp","getParameters","encodings","active","setParameters","createOfferOrAnswer","_method","onSettingLocalDescription","nativeClose","CodecsHandler","preferCodec","codecName","splitLines","videoCodecNumbers","vp8LineNumber","vp9LineNumber","h264LineNumber","preferCodecHelper","codec","ignore","preferCodecNumber","newLine","videoCodecNumbersOriginal","newOrder","codecNumber","join","trim","removeVPX","disableNACK","prioritize","codecMimeType","codecs","mimeType","unshift","splice","removeNonG722","setBAS","bandwidth","findLine","sdpLines","prefix","findLineInRange","startLine","endLine","realEndLine","getCodecPayloadType","sdpLine","pattern","RegExp","setVideoBitrates","vp8Payload","xgoogle_min_bitrate","min","xgoogle_max_bitrate","max","vp8Index","rtxPayload","rtxIndex","rtxFmtpLineIndex","appendrtxNext","concat","setOpusAttributes","opusPayload","opusIndex","opusFmtpLineIndex","appendOpusNext","stereo","maxaveragebitrate","maxplaybackrate","cbr","useinbandfec","usedtx","maxptime","forceStereoAudio","fmtpLineIndex","extractSdp","payload","setApplicationSpecificBandwidth","preferVP9","BandwidthHandler","icePair","iceRestrictions","iceProtocols","udp","tcp","IceServersHandler","getIceServers","setStreamType","chromeMediaSource","mozMediaSource","mediaSource","getUserMediaHandler","options","mutex","localMediaConstraints","streaming","isBlackBerry","getUserMediaStream","getUserMediaError","getUserMediaFailure","hints","getUserMediaSuccess","successCB","failureCB","getDisplayMedia","Error","queueRequests","returnBack","shift","currentUserMediaRequestOptions","handleType","setHandlers","syncAction","mute","isSyncAction","enabled","isAudioMuted","unmute","graduallyIncreaseVolume","looper","times","afterEach","setTimeoutInteval","numberOfTimes","startedTimes","content","last","isobject","receivingTime","latency","sendingTime","autoTranslateText","original","Translator","TranslateText","translatedText","initialText","packetSize","textToTransfer","sendText","textMessage","packets","slice","chunkInterval","FileProgressBarHandler","handle","progressHelper","updateLabel","progress","position","innerHTML","div","title","filesContainer","body","documentElement","insertBefore","firstChild","querySelector","maxChunks","helper","value","currentPosition","url","TranslationHandler","language","googKey","newScript","sourceText","encodeURIComponent","randomNumber","response","translations","source","src","getElementsByTagName","appendChild","getListOfLanguages","xhr","XMLHttpRequest","onreadystatechange","DONE","responseText","languages","useDefaultDevices","preventDuplicateOnStreamEvents","connectSocket","socketAutoReConnect","FirebaseConnection","PubNubConnection","joinRoom","mediaConstraints","getStreamInfoForAdmin","password","isRoomJoined","openRoom","identifier","publicRoomIdentifier","isRoomOpened","selectAll","map","tracks","beforeJoin","dontCaptureUserMedia","invokeGetUserMedia","applyConstraints","setStreamEndHandler","muted","onstream","messageToDeliver","transport","openOrJoin","checkPresence","isRoomExist","captureUserMedia","eventObject","onleave","rejoin","onReConnecting","sessionForced","nonScreenSession","onbeforeunload","arg1","dontCloseSocket","closeBeforeUnload","closeSocket","ignoreBeforeUnload","changeUserId","newUserId","facingMode","lastAudioDevice","lastVideoDevice","sourceId","VoiceActivityDetection","DtlsSrtpKeyAgreement","googImprovedWifiBwe","googScreencastMinBitrate","googIPv6","googDscp","googCpuUnderuseThreshold","googCpuOveruseThreshold","googSuspendBelowMinBitrate","googCpuOveruseDetection","disconnect","closeEntireSession","videosContainer","user","gumCallback","streamCallback","videoConstraints","alert","resetTrack","remoteUsersIds","isRemote","alreadySetEndHandler","participantId","acceptParticipationRequest","invokeSelectFileDialog","selector","FileSelector","accept","selectSingleFile","paused","poster","snapshot","getSocket","skipStreams","local","remote","key","setCustomSocketEvent","customEvent","getNumberOfBroadcastViewers","broadcastId","numberOfBroadcastViewers","dontWriteLogs","setCustomSocketHandler","customSocketHandler","_roomid","SSEConnection","dontAttachStream","updateExtraData","beforeRemovingStream","isChromeExtensionAvailable","checkIfChromeExtensionAvailable","isFirefoxExtensionAvailable","getChromeExtensionStatus","modifyScreenConstraints","screen_constraints","isOnline","isLowBandwidth","opt","getExtraData","autoOpenOrJoin","resetScreen","setPassword","errors","ROOM_NOT_AVAILABLE","INVALID_PASSWORD","USERID_NOT_AVAILABLE","ROOM_PERMISSION_DENIED","ROOM_FULL","DID_NOT_JOIN_ANY_ROOM","INVALID_SOCKET","PUBLIC_IDENTIFIER_MISSING","INVALID_ADMIN_CREDENTIAL","render","_vm","_h","$createElement","_c","_self","_v","click","startBattleMode","startPartyMode","staticRenderFns","TitleScreenvue_type_script_lang_ts_","mounted","__webpack_require__","methods","GameSettings","SetupBattleModeGame","router","SetupPartyModeGame","views_TitleScreenvue_type_script_lang_ts_","component","componentNormalizer","__webpack_exports__","cachedSetTimeout","cachedClearTimeout","defaultSetTimout","defaultClearTimeout","runTimeout","fun","call","runClearTimeout","marker","clearTimeout","currentQueue","queue","draining","queueIndex","cleanUpNextTick","drainQueue","timeout","len","run","Item","noop","nextTick","env","argv","addListener","once","off","removeListener","removeAllListeners","prependListener","prependOnceListener","listeners","binding","cwd","chdir","dir","umask"],"mappings":"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","file":"js/about.308726d7.js","sourcesContent":["'use strict';\r\n\r\n// Last time updated: 2019-06-15 4:26:11 PM UTC\r\n\r\n// _________________________\r\n// RTCMultiConnection v3.6.9\r\n\r\n// Open-Sourced: https://github.com/muaz-khan/RTCMultiConnection\r\n\r\n// --------------------------------------------------\r\n// Muaz Khan     - www.MuazKhan.com\r\n// MIT License   - www.WebRTC-Experiment.com/licence\r\n// --------------------------------------------------\r\n\r\nvar RTCMultiConnection = function(roomid, forceOptions) {\r\n\r\n    var browserFakeUserAgent = 'Fake/5.0 (FakeOS) AppleWebKit/123 (KHTML, like Gecko) Fake/12.3.4567.89 Fake/123.45';\r\n\r\n    (function(that) {\r\n        if (!that) {\r\n            return;\r\n        }\r\n\r\n        if (typeof window !== 'undefined') {\r\n            return;\r\n        }\r\n\r\n        if (typeof global === 'undefined') {\r\n            return;\r\n        }\r\n\r\n        global.navigator = {\r\n            userAgent: browserFakeUserAgent,\r\n            getUserMedia: function() {}\r\n        };\r\n\r\n        if (!global.console) {\r\n            global.console = {};\r\n        }\r\n\r\n        if (typeof global.console.debug === 'undefined') {\r\n            global.console.debug = global.console.info = global.console.error = global.console.log = global.console.log || function() {\r\n                console.log(arguments);\r\n            };\r\n        }\r\n\r\n        if (typeof document === 'undefined') {\r\n            /*global document:true */\r\n            that.document = {};\r\n\r\n            document.createElement = document.captureStream = document.mozCaptureStream = function() {\r\n                var obj = {\r\n                    getContext: function() {\r\n                        return obj;\r\n                    },\r\n                    play: function() {},\r\n                    pause: function() {},\r\n                    drawImage: function() {},\r\n                    toDataURL: function() {\r\n                        return '';\r\n                    }\r\n                };\r\n                return obj;\r\n            };\r\n\r\n            document.addEventListener = document.removeEventListener = that.addEventListener = that.removeEventListener = function() {};\r\n\r\n            that.HTMLVideoElement = that.HTMLMediaElement = function() {};\r\n        }\r\n\r\n        if (typeof io === 'undefined') {\r\n            that.io = function() {\r\n                return {\r\n                    on: function(eventName, callback) {\r\n                        callback = callback || function() {};\r\n\r\n                        if (eventName === 'connect') {\r\n                            callback();\r\n                        }\r\n                    },\r\n                    emit: function(eventName, data, callback) {\r\n                        callback = callback || function() {};\r\n                        if (eventName === 'open-room' || eventName === 'join-room') {\r\n                            callback(true, data.sessionid, null);\r\n                        }\r\n                    }\r\n                };\r\n            };\r\n        }\r\n\r\n        if (typeof location === 'undefined') {\r\n            /*global location:true */\r\n            that.location = {\r\n                protocol: 'file:',\r\n                href: '',\r\n                hash: '',\r\n                origin: 'self'\r\n            };\r\n        }\r\n\r\n        if (typeof screen === 'undefined') {\r\n            /*global screen:true */\r\n            that.screen = {\r\n                width: 0,\r\n                height: 0\r\n            };\r\n        }\r\n\r\n        if (typeof URL === 'undefined') {\r\n            /*global screen:true */\r\n            that.URL = {\r\n                createObjectURL: function() {\r\n                    return '';\r\n                },\r\n                revokeObjectURL: function() {\r\n                    return '';\r\n                }\r\n            };\r\n        }\r\n\r\n        /*global window:true */\r\n        that.window = global;\r\n    })(typeof global !== 'undefined' ? global : null);\r\n\r\n    function SocketConnection(connection, connectCallback) {\r\n        function isData(session) {\r\n            return !session.audio && !session.video && !session.screen && session.data;\r\n        }\r\n\r\n        var parameters = '';\r\n\r\n        parameters += '?userid=' + connection.userid;\r\n        parameters += '&sessionid=' + connection.sessionid;\r\n        parameters += '&msgEvent=' + connection.socketMessageEvent;\r\n        parameters += '&socketCustomEvent=' + connection.socketCustomEvent;\r\n        parameters += '&autoCloseEntireSession=' + !!connection.autoCloseEntireSession;\r\n\r\n        if (connection.session.broadcast === true) {\r\n            parameters += '&oneToMany=true';\r\n        }\r\n\r\n        parameters += '&maxParticipantsAllowed=' + connection.maxParticipantsAllowed;\r\n\r\n        if (connection.enableScalableBroadcast) {\r\n            parameters += '&enableScalableBroadcast=true';\r\n            parameters += '&maxRelayLimitPerUser=' + (connection.maxRelayLimitPerUser || 2);\r\n        }\r\n\r\n        parameters += '&extra=' + JSON.stringify(connection.extra || {});\r\n\r\n        if (connection.socketCustomParameters) {\r\n            parameters += connection.socketCustomParameters;\r\n        }\r\n\r\n        try {\r\n            io.sockets = {};\r\n        } catch (e) {};\r\n\r\n        if (!connection.socketURL) {\r\n            connection.socketURL = '/';\r\n        }\r\n\r\n        if (connection.socketURL.substr(connection.socketURL.length - 1, 1) != '/') {\r\n            // connection.socketURL = 'https://domain.com:9001/';\r\n            throw '\"socketURL\" MUST end with a slash.';\r\n        }\r\n\r\n        if (connection.enableLogs) {\r\n            if (connection.socketURL == '/') {\r\n                console.info('socket.io url is: ', location.origin + '/');\r\n            } else {\r\n                console.info('socket.io url is: ', connection.socketURL);\r\n            }\r\n        }\r\n\r\n        try {\r\n            connection.socket = io(connection.socketURL + parameters);\r\n        } catch (e) {\r\n            connection.socket = io.connect(connection.socketURL + parameters, connection.socketOptions);\r\n        }\r\n\r\n        var mPeer = connection.multiPeersHandler;\r\n\r\n        connection.socket.on('extra-data-updated', function(remoteUserId, extra) {\r\n            if (!connection.peers[remoteUserId]) return;\r\n            connection.peers[remoteUserId].extra = extra;\r\n\r\n            connection.onExtraDataUpdated({\r\n                userid: remoteUserId,\r\n                extra: extra\r\n            });\r\n\r\n            updateExtraBackup(remoteUserId, extra);\r\n        });\r\n\r\n        function updateExtraBackup(remoteUserId, extra) {\r\n            if (!connection.peersBackup[remoteUserId]) {\r\n                connection.peersBackup[remoteUserId] = {\r\n                    userid: remoteUserId,\r\n                    extra: {}\r\n                };\r\n            }\r\n\r\n            connection.peersBackup[remoteUserId].extra = extra;\r\n        }\r\n\r\n        function onMessageEvent(message) {\r\n            if (message.remoteUserId != connection.userid) return;\r\n\r\n            if (connection.peers[message.sender] && connection.peers[message.sender].extra != message.message.extra) {\r\n                connection.peers[message.sender].extra = message.extra;\r\n                connection.onExtraDataUpdated({\r\n                    userid: message.sender,\r\n                    extra: message.extra\r\n                });\r\n\r\n                updateExtraBackup(message.sender, message.extra);\r\n            }\r\n\r\n            if (message.message.streamSyncNeeded && connection.peers[message.sender]) {\r\n                var stream = connection.streamEvents[message.message.streamid];\r\n                if (!stream || !stream.stream) {\r\n                    return;\r\n                }\r\n\r\n                var action = message.message.action;\r\n\r\n                if (action === 'ended' || action === 'inactive' || action === 'stream-removed') {\r\n                    if (connection.peersBackup[stream.userid]) {\r\n                        stream.extra = connection.peersBackup[stream.userid].extra;\r\n                    }\r\n                    connection.onstreamended(stream);\r\n                    return;\r\n                }\r\n\r\n                var type = message.message.type != 'both' ? message.message.type : null;\r\n\r\n                if (typeof stream.stream[action] == 'function') {\r\n                    stream.stream[action](type);\r\n                }\r\n                return;\r\n            }\r\n\r\n            if (message.message === 'dropPeerConnection') {\r\n                connection.deletePeer(message.sender);\r\n                return;\r\n            }\r\n\r\n            if (message.message.allParticipants) {\r\n                if (message.message.allParticipants.indexOf(message.sender) === -1) {\r\n                    message.message.allParticipants.push(message.sender);\r\n                }\r\n\r\n                message.message.allParticipants.forEach(function(participant) {\r\n                    mPeer[!connection.peers[participant] ? 'createNewPeer' : 'renegotiatePeer'](participant, {\r\n                        localPeerSdpConstraints: {\r\n                            OfferToReceiveAudio: connection.sdpConstraints.mandatory.OfferToReceiveAudio,\r\n                            OfferToReceiveVideo: connection.sdpConstraints.mandatory.OfferToReceiveVideo\r\n                        },\r\n                        remotePeerSdpConstraints: {\r\n                            OfferToReceiveAudio: connection.session.oneway ? !!connection.session.audio : connection.sdpConstraints.mandatory.OfferToReceiveAudio,\r\n                            OfferToReceiveVideo: connection.session.oneway ? !!connection.session.video || !!connection.session.screen : connection.sdpConstraints.mandatory.OfferToReceiveVideo\r\n                        },\r\n                        isOneWay: !!connection.session.oneway || connection.direction === 'one-way',\r\n                        isDataOnly: isData(connection.session)\r\n                    });\r\n                });\r\n                return;\r\n            }\r\n\r\n            if (message.message.newParticipant) {\r\n                if (message.message.newParticipant == connection.userid) return;\r\n                if (!!connection.peers[message.message.newParticipant]) return;\r\n\r\n                mPeer.createNewPeer(message.message.newParticipant, message.message.userPreferences || {\r\n                    localPeerSdpConstraints: {\r\n                        OfferToReceiveAudio: connection.sdpConstraints.mandatory.OfferToReceiveAudio,\r\n                        OfferToReceiveVideo: connection.sdpConstraints.mandatory.OfferToReceiveVideo\r\n                    },\r\n                    remotePeerSdpConstraints: {\r\n                        OfferToReceiveAudio: connection.session.oneway ? !!connection.session.audio : connection.sdpConstraints.mandatory.OfferToReceiveAudio,\r\n                        OfferToReceiveVideo: connection.session.oneway ? !!connection.session.video || !!connection.session.screen : connection.sdpConstraints.mandatory.OfferToReceiveVideo\r\n                    },\r\n                    isOneWay: !!connection.session.oneway || connection.direction === 'one-way',\r\n                    isDataOnly: isData(connection.session)\r\n                });\r\n                return;\r\n            }\r\n\r\n            if (message.message.readyForOffer) {\r\n                if (connection.attachStreams.length) {\r\n                    connection.waitingForLocalMedia = false;\r\n                }\r\n\r\n                if (connection.waitingForLocalMedia) {\r\n                    // if someone is waiting to join you\r\n                    // make sure that we've local media before making a handshake\r\n                    setTimeout(function() {\r\n                        onMessageEvent(message);\r\n                    }, 1);\r\n                    return;\r\n                }\r\n            }\r\n\r\n            if (message.message.newParticipationRequest && message.sender !== connection.userid) {\r\n                if (connection.peers[message.sender]) {\r\n                    connection.deletePeer(message.sender);\r\n                }\r\n\r\n                var userPreferences = {\r\n                    extra: message.extra || {},\r\n                    localPeerSdpConstraints: message.message.remotePeerSdpConstraints || {\r\n                        OfferToReceiveAudio: connection.sdpConstraints.mandatory.OfferToReceiveAudio,\r\n                        OfferToReceiveVideo: connection.sdpConstraints.mandatory.OfferToReceiveVideo\r\n                    },\r\n                    remotePeerSdpConstraints: message.message.localPeerSdpConstraints || {\r\n                        OfferToReceiveAudio: connection.session.oneway ? !!connection.session.audio : connection.sdpConstraints.mandatory.OfferToReceiveAudio,\r\n                        OfferToReceiveVideo: connection.session.oneway ? !!connection.session.video || !!connection.session.screen : connection.sdpConstraints.mandatory.OfferToReceiveVideo\r\n                    },\r\n                    isOneWay: typeof message.message.isOneWay !== 'undefined' ? message.message.isOneWay : !!connection.session.oneway || connection.direction === 'one-way',\r\n                    isDataOnly: typeof message.message.isDataOnly !== 'undefined' ? message.message.isDataOnly : isData(connection.session),\r\n                    dontGetRemoteStream: typeof message.message.isOneWay !== 'undefined' ? message.message.isOneWay : !!connection.session.oneway || connection.direction === 'one-way',\r\n                    dontAttachLocalStream: !!message.message.dontGetRemoteStream,\r\n                    connectionDescription: message,\r\n                    successCallback: function() {}\r\n                };\r\n\r\n                connection.onNewParticipant(message.sender, userPreferences);\r\n                return;\r\n            }\r\n\r\n            if (message.message.changedUUID) {\r\n                if (connection.peers[message.message.oldUUID]) {\r\n                    connection.peers[message.message.newUUID] = connection.peers[message.message.oldUUID];\r\n                    delete connection.peers[message.message.oldUUID];\r\n                }\r\n            }\r\n\r\n            if (message.message.userLeft) {\r\n                mPeer.onUserLeft(message.sender);\r\n\r\n                if (!!message.message.autoCloseEntireSession) {\r\n                    connection.leave();\r\n                }\r\n\r\n                return;\r\n            }\r\n\r\n            mPeer.addNegotiatedMessage(message.message, message.sender);\r\n        }\r\n\r\n        connection.socket.on(connection.socketMessageEvent, onMessageEvent);\r\n\r\n        var alreadyConnected = false;\r\n\r\n        connection.socket.resetProps = function() {\r\n            alreadyConnected = false;\r\n        };\r\n\r\n        connection.socket.on('connect', function() {\r\n            if (alreadyConnected) {\r\n                return;\r\n            }\r\n            alreadyConnected = true;\r\n\r\n            if (connection.enableLogs) {\r\n                console.info('socket.io connection is opened.');\r\n            }\r\n\r\n            setTimeout(function() {\r\n                connection.socket.emit('extra-data-updated', connection.extra);\r\n            }, 1000);\r\n\r\n            if (connectCallback) {\r\n                connectCallback(connection.socket);\r\n            }\r\n        });\r\n\r\n        connection.socket.on('disconnect', function(event) {\r\n            connection.onSocketDisconnect(event);\r\n        });\r\n\r\n        connection.socket.on('error', function(event) {\r\n            connection.onSocketError(event);\r\n        });\r\n\r\n        connection.socket.on('user-disconnected', function(remoteUserId) {\r\n            if (remoteUserId === connection.userid) {\r\n                return;\r\n            }\r\n\r\n            connection.onUserStatusChanged({\r\n                userid: remoteUserId,\r\n                status: 'offline',\r\n                extra: connection.peers[remoteUserId] ? connection.peers[remoteUserId].extra || {} : {}\r\n            });\r\n\r\n            connection.deletePeer(remoteUserId);\r\n        });\r\n\r\n        connection.socket.on('user-connected', function(userid) {\r\n            if (userid === connection.userid) {\r\n                return;\r\n            }\r\n\r\n            connection.onUserStatusChanged({\r\n                userid: userid,\r\n                status: 'online',\r\n                extra: connection.peers[userid] ? connection.peers[userid].extra || {} : {}\r\n            });\r\n        });\r\n\r\n        connection.socket.on('closed-entire-session', function(sessionid, extra) {\r\n            connection.leave();\r\n            connection.onEntireSessionClosed({\r\n                sessionid: sessionid,\r\n                userid: sessionid,\r\n                extra: extra\r\n            });\r\n        });\r\n\r\n        connection.socket.on('userid-already-taken', function(useridAlreadyTaken, yourNewUserId) {\r\n            connection.onUserIdAlreadyTaken(useridAlreadyTaken, yourNewUserId);\r\n        });\r\n\r\n        connection.socket.on('logs', function(log) {\r\n            if (!connection.enableLogs) return;\r\n            console.debug('server-logs', log);\r\n        });\r\n\r\n        connection.socket.on('number-of-broadcast-viewers-updated', function(data) {\r\n            connection.onNumberOfBroadcastViewersUpdated(data);\r\n        });\r\n\r\n        connection.socket.on('set-isInitiator-true', function(sessionid) {\r\n            if (sessionid != connection.sessionid) return;\r\n            connection.isInitiator = true;\r\n        });\r\n    }\r\n\r\n    function MultiPeers(connection) {\r\n        var self = this;\r\n\r\n        var skipPeers = ['getAllParticipants', 'getLength', 'selectFirst', 'streams', 'send', 'forEach'];\r\n        connection.peers = {\r\n            getLength: function() {\r\n                var numberOfPeers = 0;\r\n                for (var peer in this) {\r\n                    if (skipPeers.indexOf(peer) == -1) {\r\n                        numberOfPeers++;\r\n                    }\r\n                }\r\n                return numberOfPeers;\r\n            },\r\n            selectFirst: function() {\r\n                var firstPeer;\r\n                for (var peer in this) {\r\n                    if (skipPeers.indexOf(peer) == -1) {\r\n                        firstPeer = this[peer];\r\n                    }\r\n                }\r\n                return firstPeer;\r\n            },\r\n            getAllParticipants: function(sender) {\r\n                var allPeers = [];\r\n                for (var peer in this) {\r\n                    if (skipPeers.indexOf(peer) == -1 && peer != sender) {\r\n                        allPeers.push(peer);\r\n                    }\r\n                }\r\n                return allPeers;\r\n            },\r\n            forEach: function(callbcak) {\r\n                this.getAllParticipants().forEach(function(participant) {\r\n                    callbcak(connection.peers[participant]);\r\n                });\r\n            },\r\n            send: function(data, remoteUserId) {\r\n                var that = this;\r\n\r\n                if (!isNull(data.size) && !isNull(data.type)) {\r\n                    if (connection.enableFileSharing) {\r\n                        self.shareFile(data, remoteUserId);\r\n                        return;\r\n                    }\r\n\r\n                    if (typeof data !== 'string') {\r\n                        data = JSON.stringify(data);\r\n                    }\r\n                }\r\n\r\n                if (data.type !== 'text' && !(data instanceof ArrayBuffer) && !(data instanceof DataView)) {\r\n                    TextSender.send({\r\n                        text: data,\r\n                        channel: this,\r\n                        connection: connection,\r\n                        remoteUserId: remoteUserId\r\n                    });\r\n                    return;\r\n                }\r\n\r\n                if (data.type === 'text') {\r\n                    data = JSON.stringify(data);\r\n                }\r\n\r\n                if (remoteUserId) {\r\n                    var remoteUser = connection.peers[remoteUserId];\r\n                    if (remoteUser) {\r\n                        if (!remoteUser.channels.length) {\r\n                            connection.peers[remoteUserId].createDataChannel();\r\n                            connection.renegotiate(remoteUserId);\r\n                            setTimeout(function() {\r\n                                that.send(data, remoteUserId);\r\n                            }, 3000);\r\n                            return;\r\n                        }\r\n\r\n                        remoteUser.channels.forEach(function(channel) {\r\n                            channel.send(data);\r\n                        });\r\n                        return;\r\n                    }\r\n                }\r\n\r\n                this.getAllParticipants().forEach(function(participant) {\r\n                    if (!that[participant].channels.length) {\r\n                        connection.peers[participant].createDataChannel();\r\n                        connection.renegotiate(participant);\r\n                        setTimeout(function() {\r\n                            that[participant].channels.forEach(function(channel) {\r\n                                channel.send(data);\r\n                            });\r\n                        }, 3000);\r\n                        return;\r\n                    }\r\n\r\n                    that[participant].channels.forEach(function(channel) {\r\n                        channel.send(data);\r\n                    });\r\n                });\r\n            }\r\n        };\r\n\r\n        this.uuid = connection.userid;\r\n\r\n        this.getLocalConfig = function(remoteSdp, remoteUserId, userPreferences) {\r\n            if (!userPreferences) {\r\n                userPreferences = {};\r\n            }\r\n\r\n            return {\r\n                streamsToShare: userPreferences.streamsToShare || {},\r\n                rtcMultiConnection: connection,\r\n                connectionDescription: userPreferences.connectionDescription,\r\n                userid: remoteUserId,\r\n                localPeerSdpConstraints: userPreferences.localPeerSdpConstraints,\r\n                remotePeerSdpConstraints: userPreferences.remotePeerSdpConstraints,\r\n                dontGetRemoteStream: !!userPreferences.dontGetRemoteStream,\r\n                dontAttachLocalStream: !!userPreferences.dontAttachLocalStream,\r\n                renegotiatingPeer: !!userPreferences.renegotiatingPeer,\r\n                peerRef: userPreferences.peerRef,\r\n                channels: userPreferences.channels || [],\r\n                onLocalSdp: function(localSdp) {\r\n                    self.onNegotiationNeeded(localSdp, remoteUserId);\r\n                },\r\n                onLocalCandidate: function(localCandidate) {\r\n                    localCandidate = OnIceCandidateHandler.processCandidates(connection, localCandidate)\r\n                    if (localCandidate) {\r\n                        self.onNegotiationNeeded(localCandidate, remoteUserId);\r\n                    }\r\n                },\r\n                remoteSdp: remoteSdp,\r\n                onDataChannelMessage: function(message) {\r\n                    if (!connection.fbr && connection.enableFileSharing) initFileBufferReader();\r\n\r\n                    if (typeof message == 'string' || !connection.enableFileSharing) {\r\n                        self.onDataChannelMessage(message, remoteUserId);\r\n                        return;\r\n                    }\r\n\r\n                    var that = this;\r\n\r\n                    if (message instanceof ArrayBuffer || message instanceof DataView) {\r\n                        connection.fbr.convertToObject(message, function(object) {\r\n                            that.onDataChannelMessage(object);\r\n                        });\r\n                        return;\r\n                    }\r\n\r\n                    if (message.readyForNextChunk) {\r\n                        connection.fbr.getNextChunk(message, function(nextChunk, isLastChunk) {\r\n                            connection.peers[remoteUserId].channels.forEach(function(channel) {\r\n                                channel.send(nextChunk);\r\n                            });\r\n                        }, remoteUserId);\r\n                        return;\r\n                    }\r\n\r\n                    if (message.chunkMissing) {\r\n                        connection.fbr.chunkMissing(message);\r\n                        return;\r\n                    }\r\n\r\n                    connection.fbr.addChunk(message, function(promptNextChunk) {\r\n                        connection.peers[remoteUserId].peer.channel.send(promptNextChunk);\r\n                    });\r\n                },\r\n                onDataChannelError: function(error) {\r\n                    self.onDataChannelError(error, remoteUserId);\r\n                },\r\n                onDataChannelOpened: function(channel) {\r\n                    self.onDataChannelOpened(channel, remoteUserId);\r\n                },\r\n                onDataChannelClosed: function(event) {\r\n                    self.onDataChannelClosed(event, remoteUserId);\r\n                },\r\n                onRemoteStream: function(stream) {\r\n                    if (connection.peers[remoteUserId]) {\r\n                        connection.peers[remoteUserId].streams.push(stream);\r\n                    }\r\n\r\n                    self.onGettingRemoteMedia(stream, remoteUserId);\r\n                },\r\n                onRemoteStreamRemoved: function(stream) {\r\n                    self.onRemovingRemoteMedia(stream, remoteUserId);\r\n                },\r\n                onPeerStateChanged: function(states) {\r\n                    self.onPeerStateChanged(states);\r\n\r\n                    if (states.iceConnectionState === 'new') {\r\n                        self.onNegotiationStarted(remoteUserId, states);\r\n                    }\r\n\r\n                    if (states.iceConnectionState === 'connected') {\r\n                        self.onNegotiationCompleted(remoteUserId, states);\r\n                    }\r\n\r\n                    if (states.iceConnectionState.search(/closed|failed/gi) !== -1) {\r\n                        self.onUserLeft(remoteUserId);\r\n                        self.disconnectWith(remoteUserId);\r\n                    }\r\n                }\r\n            };\r\n        };\r\n\r\n        this.createNewPeer = function(remoteUserId, userPreferences) {\r\n            if (connection.maxParticipantsAllowed <= connection.getAllParticipants().length) {\r\n                return;\r\n            }\r\n\r\n            userPreferences = userPreferences || {};\r\n\r\n            if (connection.isInitiator && !!connection.session.audio && connection.session.audio === 'two-way' && !userPreferences.streamsToShare) {\r\n                userPreferences.isOneWay = false;\r\n                userPreferences.isDataOnly = false;\r\n                userPreferences.session = connection.session;\r\n            }\r\n\r\n            if (!userPreferences.isOneWay && !userPreferences.isDataOnly) {\r\n                userPreferences.isOneWay = true;\r\n                this.onNegotiationNeeded({\r\n                    enableMedia: true,\r\n                    userPreferences: userPreferences\r\n                }, remoteUserId);\r\n                return;\r\n            }\r\n\r\n            userPreferences = connection.setUserPreferences(userPreferences, remoteUserId);\r\n            var localConfig = this.getLocalConfig(null, remoteUserId, userPreferences);\r\n            connection.peers[remoteUserId] = new PeerInitiator(localConfig);\r\n        };\r\n\r\n        this.createAnsweringPeer = function(remoteSdp, remoteUserId, userPreferences) {\r\n            userPreferences = connection.setUserPreferences(userPreferences || {}, remoteUserId);\r\n\r\n            var localConfig = this.getLocalConfig(remoteSdp, remoteUserId, userPreferences);\r\n            connection.peers[remoteUserId] = new PeerInitiator(localConfig);\r\n        };\r\n\r\n        this.renegotiatePeer = function(remoteUserId, userPreferences, remoteSdp) {\r\n            if (!connection.peers[remoteUserId]) {\r\n                if (connection.enableLogs) {\r\n                    console.error('Peer (' + remoteUserId + ') does not exist. Renegotiation skipped.');\r\n                }\r\n                return;\r\n            }\r\n\r\n            if (!userPreferences) {\r\n                userPreferences = {};\r\n            }\r\n\r\n            userPreferences.renegotiatingPeer = true;\r\n            userPreferences.peerRef = connection.peers[remoteUserId].peer;\r\n            userPreferences.channels = connection.peers[remoteUserId].channels;\r\n\r\n            var localConfig = this.getLocalConfig(remoteSdp, remoteUserId, userPreferences);\r\n\r\n            connection.peers[remoteUserId] = new PeerInitiator(localConfig);\r\n        };\r\n\r\n        this.replaceTrack = function(track, remoteUserId, isVideoTrack) {\r\n            if (!connection.peers[remoteUserId]) {\r\n                throw 'This peer (' + remoteUserId + ') does not exist.';\r\n            }\r\n\r\n            var peer = connection.peers[remoteUserId].peer;\r\n\r\n            if (!!peer.getSenders && typeof peer.getSenders === 'function' && peer.getSenders().length) {\r\n                peer.getSenders().forEach(function(rtpSender) {\r\n                    if (isVideoTrack && rtpSender.track.kind === 'video') {\r\n                        connection.peers[remoteUserId].peer.lastVideoTrack = rtpSender.track;\r\n                        rtpSender.replaceTrack(track);\r\n                    }\r\n\r\n                    if (!isVideoTrack && rtpSender.track.kind === 'audio') {\r\n                        connection.peers[remoteUserId].peer.lastAudioTrack = rtpSender.track;\r\n                        rtpSender.replaceTrack(track);\r\n                    }\r\n                });\r\n                return;\r\n            }\r\n\r\n            console.warn('RTPSender.replaceTrack is NOT supported.');\r\n            this.renegotiatePeer(remoteUserId);\r\n        };\r\n\r\n        this.onNegotiationNeeded = function(message, remoteUserId) {};\r\n        this.addNegotiatedMessage = function(message, remoteUserId) {\r\n            if (message.type && message.sdp) {\r\n                if (message.type == 'answer') {\r\n                    if (connection.peers[remoteUserId]) {\r\n                        connection.peers[remoteUserId].addRemoteSdp(message);\r\n                    }\r\n                }\r\n\r\n                if (message.type == 'offer') {\r\n                    if (message.renegotiatingPeer) {\r\n                        this.renegotiatePeer(remoteUserId, null, message);\r\n                    } else {\r\n                        this.createAnsweringPeer(message, remoteUserId);\r\n                    }\r\n                }\r\n\r\n                if (connection.enableLogs) {\r\n                    console.log('Remote peer\\'s sdp:', message.sdp);\r\n                }\r\n                return;\r\n            }\r\n\r\n            if (message.candidate) {\r\n                if (connection.peers[remoteUserId]) {\r\n                    connection.peers[remoteUserId].addRemoteCandidate(message);\r\n                }\r\n\r\n                if (connection.enableLogs) {\r\n                    console.log('Remote peer\\'s candidate pairs:', message.candidate);\r\n                }\r\n                return;\r\n            }\r\n\r\n            if (message.enableMedia) {\r\n                connection.session = message.userPreferences.session || connection.session;\r\n\r\n                if (connection.session.oneway && connection.attachStreams.length) {\r\n                    connection.attachStreams = [];\r\n                }\r\n\r\n                if (message.userPreferences.isDataOnly && connection.attachStreams.length) {\r\n                    connection.attachStreams.length = [];\r\n                }\r\n\r\n                var streamsToShare = {};\r\n                connection.attachStreams.forEach(function(stream) {\r\n                    streamsToShare[stream.streamid] = {\r\n                        isAudio: !!stream.isAudio,\r\n                        isVideo: !!stream.isVideo,\r\n                        isScreen: !!stream.isScreen\r\n                    };\r\n                });\r\n                message.userPreferences.streamsToShare = streamsToShare;\r\n\r\n                self.onNegotiationNeeded({\r\n                    readyForOffer: true,\r\n                    userPreferences: message.userPreferences\r\n                }, remoteUserId);\r\n            }\r\n\r\n            if (message.readyForOffer) {\r\n                connection.onReadyForOffer(remoteUserId, message.userPreferences);\r\n            }\r\n\r\n            function cb(stream) {\r\n                gumCallback(stream, message, remoteUserId);\r\n            }\r\n        };\r\n\r\n        function gumCallback(stream, message, remoteUserId) {\r\n            var streamsToShare = {};\r\n            connection.attachStreams.forEach(function(stream) {\r\n                streamsToShare[stream.streamid] = {\r\n                    isAudio: !!stream.isAudio,\r\n                    isVideo: !!stream.isVideo,\r\n                    isScreen: !!stream.isScreen\r\n                };\r\n            });\r\n            message.userPreferences.streamsToShare = streamsToShare;\r\n\r\n            self.onNegotiationNeeded({\r\n                readyForOffer: true,\r\n                userPreferences: message.userPreferences\r\n            }, remoteUserId);\r\n        }\r\n\r\n        this.onGettingRemoteMedia = function(stream, remoteUserId) {};\r\n        this.onRemovingRemoteMedia = function(stream, remoteUserId) {};\r\n        this.onGettingLocalMedia = function(localStream) {};\r\n        this.onLocalMediaError = function(error, constraints) {\r\n            connection.onMediaError(error, constraints);\r\n        };\r\n\r\n        function initFileBufferReader() {\r\n            connection.fbr = new FileBufferReader();\r\n            connection.fbr.onProgress = function(chunk) {\r\n                connection.onFileProgress(chunk);\r\n            };\r\n            connection.fbr.onBegin = function(file) {\r\n                connection.onFileStart(file);\r\n            };\r\n            connection.fbr.onEnd = function(file) {\r\n                connection.onFileEnd(file);\r\n            };\r\n        }\r\n\r\n        this.shareFile = function(file, remoteUserId) {\r\n            initFileBufferReader();\r\n\r\n            connection.fbr.readAsArrayBuffer(file, function(uuid) {\r\n                var arrayOfUsers = connection.getAllParticipants();\r\n\r\n                if (remoteUserId) {\r\n                    arrayOfUsers = [remoteUserId];\r\n                }\r\n\r\n                arrayOfUsers.forEach(function(participant) {\r\n                    connection.fbr.getNextChunk(uuid, function(nextChunk) {\r\n                        connection.peers[participant].channels.forEach(function(channel) {\r\n                            channel.send(nextChunk);\r\n                        });\r\n                    }, participant);\r\n                });\r\n            }, {\r\n                userid: connection.userid,\r\n                // extra: connection.extra,\r\n                chunkSize: DetectRTC.browser.name === 'Firefox' ? 15 * 1000 : connection.chunkSize || 0\r\n            });\r\n        };\r\n\r\n        if (typeof 'TextReceiver' !== 'undefined') {\r\n            var textReceiver = new TextReceiver(connection);\r\n        }\r\n\r\n        this.onDataChannelMessage = function(message, remoteUserId) {\r\n            textReceiver.receive(JSON.parse(message), remoteUserId, connection.peers[remoteUserId] ? connection.peers[remoteUserId].extra : {});\r\n        };\r\n\r\n        this.onDataChannelClosed = function(event, remoteUserId) {\r\n            event.userid = remoteUserId;\r\n            event.extra = connection.peers[remoteUserId] ? connection.peers[remoteUserId].extra : {};\r\n            connection.onclose(event);\r\n        };\r\n\r\n        this.onDataChannelError = function(error, remoteUserId) {\r\n            error.userid = remoteUserId;\r\n            event.extra = connection.peers[remoteUserId] ? connection.peers[remoteUserId].extra : {};\r\n            connection.onerror(error);\r\n        };\r\n\r\n        this.onDataChannelOpened = function(channel, remoteUserId) {\r\n            // keep last channel only; we are not expecting parallel/channels channels\r\n            if (connection.peers[remoteUserId].channels.length) {\r\n                connection.peers[remoteUserId].channels = [channel];\r\n                return;\r\n            }\r\n\r\n            connection.peers[remoteUserId].channels.push(channel);\r\n            connection.onopen({\r\n                userid: remoteUserId,\r\n                extra: connection.peers[remoteUserId] ? connection.peers[remoteUserId].extra : {},\r\n                channel: channel\r\n            });\r\n        };\r\n\r\n        this.onPeerStateChanged = function(state) {\r\n            connection.onPeerStateChanged(state);\r\n        };\r\n\r\n        this.onNegotiationStarted = function(remoteUserId, states) {};\r\n        this.onNegotiationCompleted = function(remoteUserId, states) {};\r\n\r\n        this.getRemoteStreams = function(remoteUserId) {\r\n            remoteUserId = remoteUserId || connection.peers.getAllParticipants()[0];\r\n            return connection.peers[remoteUserId] ? connection.peers[remoteUserId].streams : [];\r\n        };\r\n    }\r\n\r\n    'use strict';\r\n\r\n    // Last Updated On: 2019-01-10 5:32:55 AM UTC\r\n\r\n    // ________________\r\n    // DetectRTC v1.3.9\r\n\r\n    // Open-Sourced: https://github.com/muaz-khan/DetectRTC\r\n\r\n    // --------------------------------------------------\r\n    // Muaz Khan     - www.MuazKhan.com\r\n    // MIT License   - www.WebRTC-Experiment.com/licence\r\n    // --------------------------------------------------\r\n\r\n    (function() {\r\n\r\n        var browserFakeUserAgent = 'Fake/5.0 (FakeOS) AppleWebKit/123 (KHTML, like Gecko) Fake/12.3.4567.89 Fake/123.45';\r\n\r\n        var isNodejs = typeof process === 'object' && typeof process.versions === 'object' && process.versions.node && /*node-process*/ !process.browser;\r\n        if (isNodejs) {\r\n            var version = process.versions.node.toString().replace('v', '');\r\n            browserFakeUserAgent = 'Nodejs/' + version + ' (NodeOS) AppleWebKit/' + version + ' (KHTML, like Gecko) Nodejs/' + version + ' Nodejs/' + version\r\n        }\r\n\r\n        (function(that) {\r\n            if (typeof window !== 'undefined') {\r\n                return;\r\n            }\r\n\r\n            if (typeof window === 'undefined' && typeof global !== 'undefined') {\r\n                global.navigator = {\r\n                    userAgent: browserFakeUserAgent,\r\n                    getUserMedia: function() {}\r\n                };\r\n\r\n                /*global window:true */\r\n                that.window = global;\r\n            } else if (typeof window === 'undefined') {\r\n                // window = this;\r\n            }\r\n\r\n            if (typeof location === 'undefined') {\r\n                /*global location:true */\r\n                that.location = {\r\n                    protocol: 'file:',\r\n                    href: '',\r\n                    hash: ''\r\n                };\r\n            }\r\n\r\n            if (typeof screen === 'undefined') {\r\n                /*global screen:true */\r\n                that.screen = {\r\n                    width: 0,\r\n                    height: 0\r\n                };\r\n            }\r\n        })(typeof global !== 'undefined' ? global : window);\r\n\r\n        /*global navigator:true */\r\n        var navigator = window.navigator;\r\n\r\n        if (typeof navigator !== 'undefined') {\r\n            if (typeof navigator.webkitGetUserMedia !== 'undefined') {\r\n                navigator.getUserMedia = navigator.webkitGetUserMedia;\r\n            }\r\n\r\n            if (typeof navigator.mozGetUserMedia !== 'undefined') {\r\n                navigator.getUserMedia = navigator.mozGetUserMedia;\r\n            }\r\n        } else {\r\n            navigator = {\r\n                getUserMedia: function() {},\r\n                userAgent: browserFakeUserAgent\r\n            };\r\n        }\r\n\r\n        var isMobileDevice = !!(/Android|webOS|iPhone|iPad|iPod|BB10|BlackBerry|IEMobile|Opera Mini|Mobile|mobile/i.test(navigator.userAgent || ''));\r\n\r\n        var isEdge = navigator.userAgent.indexOf('Edge') !== -1 && (!!navigator.msSaveOrOpenBlob || !!navigator.msSaveBlob);\r\n\r\n        var isOpera = !!window.opera || navigator.userAgent.indexOf(' OPR/') >= 0;\r\n        var isFirefox = typeof window.InstallTrigger !== 'undefined';\r\n        var isSafari = /^((?!chrome|android).)*safari/i.test(navigator.userAgent);\r\n        var isChrome = !!window.chrome && !isOpera;\r\n        var isIE = typeof document !== 'undefined' && !!document.documentMode && !isEdge;\r\n\r\n        // this one can also be used:\r\n        // https://www.websocket.org/js/stuff.js (DetectBrowser.js)\r\n\r\n        function getBrowserInfo() {\r\n            var nVer = navigator.appVersion;\r\n            var nAgt = navigator.userAgent;\r\n            var browserName = navigator.appName;\r\n            var fullVersion = '' + parseFloat(navigator.appVersion);\r\n            var majorVersion = parseInt(navigator.appVersion, 10);\r\n            var nameOffset, verOffset, ix;\r\n\r\n            // both and safri and chrome has same userAgent\r\n            if (isSafari && !isChrome && nAgt.indexOf('CriOS') !== -1) {\r\n                isSafari = false;\r\n                isChrome = true;\r\n            }\r\n\r\n            // In Opera, the true version is after 'Opera' or after 'Version'\r\n            if (isOpera) {\r\n                browserName = 'Opera';\r\n                try {\r\n                    fullVersion = navigator.userAgent.split('OPR/')[1].split(' ')[0];\r\n                    majorVersion = fullVersion.split('.')[0];\r\n                } catch (e) {\r\n                    fullVersion = '0.0.0.0';\r\n                    majorVersion = 0;\r\n                }\r\n            }\r\n            // In MSIE version <=10, the true version is after 'MSIE' in userAgent\r\n            // In IE 11, look for the string after 'rv:'\r\n            else if (isIE) {\r\n                verOffset = nAgt.indexOf('rv:');\r\n                if (verOffset > 0) { //IE 11\r\n                    fullVersion = nAgt.substring(verOffset + 3);\r\n                } else { //IE 10 or earlier\r\n                    verOffset = nAgt.indexOf('MSIE');\r\n                    fullVersion = nAgt.substring(verOffset + 5);\r\n                }\r\n                browserName = 'IE';\r\n            }\r\n            // In Chrome, the true version is after 'Chrome' \r\n            else if (isChrome) {\r\n                verOffset = nAgt.indexOf('Chrome');\r\n                browserName = 'Chrome';\r\n                fullVersion = nAgt.substring(verOffset + 7);\r\n            }\r\n            // In Safari, the true version is after 'Safari' or after 'Version' \r\n            else if (isSafari) {\r\n                verOffset = nAgt.indexOf('Safari');\r\n\r\n                browserName = 'Safari';\r\n                fullVersion = nAgt.substring(verOffset + 7);\r\n\r\n                if ((verOffset = nAgt.indexOf('Version')) !== -1) {\r\n                    fullVersion = nAgt.substring(verOffset + 8);\r\n                }\r\n\r\n                if (navigator.userAgent.indexOf('Version/') !== -1) {\r\n                    fullVersion = navigator.userAgent.split('Version/')[1].split(' ')[0];\r\n                }\r\n            }\r\n            // In Firefox, the true version is after 'Firefox' \r\n            else if (isFirefox) {\r\n                verOffset = nAgt.indexOf('Firefox');\r\n                browserName = 'Firefox';\r\n                fullVersion = nAgt.substring(verOffset + 8);\r\n            }\r\n\r\n            // In most other browsers, 'name/version' is at the end of userAgent \r\n            else if ((nameOffset = nAgt.lastIndexOf(' ') + 1) < (verOffset = nAgt.lastIndexOf('/'))) {\r\n                browserName = nAgt.substring(nameOffset, verOffset);\r\n                fullVersion = nAgt.substring(verOffset + 1);\r\n\r\n                if (browserName.toLowerCase() === browserName.toUpperCase()) {\r\n                    browserName = navigator.appName;\r\n                }\r\n            }\r\n\r\n            if (isEdge) {\r\n                browserName = 'Edge';\r\n                fullVersion = navigator.userAgent.split('Edge/')[1];\r\n                // fullVersion = parseInt(navigator.userAgent.match(/Edge\\/(\\d+).(\\d+)$/)[2], 10).toString();\r\n            }\r\n\r\n            // trim the fullVersion string at semicolon/space/bracket if present\r\n            if ((ix = fullVersion.search(/[; \\)]/)) !== -1) {\r\n                fullVersion = fullVersion.substring(0, ix);\r\n            }\r\n\r\n            majorVersion = parseInt('' + fullVersion, 10);\r\n\r\n            if (isNaN(majorVersion)) {\r\n                fullVersion = '' + parseFloat(navigator.appVersion);\r\n                majorVersion = parseInt(navigator.appVersion, 10);\r\n            }\r\n\r\n            return {\r\n                fullVersion: fullVersion,\r\n                version: majorVersion,\r\n                name: browserName,\r\n                isPrivateBrowsing: false\r\n            };\r\n        }\r\n\r\n        // via: https://gist.github.com/cou929/7973956\r\n\r\n        function retry(isDone, next) {\r\n            var currentTrial = 0,\r\n                maxRetry = 50,\r\n                interval = 10,\r\n                isTimeout = false;\r\n            var id = window.setInterval(\r\n                function() {\r\n                    if (isDone()) {\r\n                        window.clearInterval(id);\r\n                        next(isTimeout);\r\n                    }\r\n                    if (currentTrial++ > maxRetry) {\r\n                        window.clearInterval(id);\r\n                        isTimeout = true;\r\n                        next(isTimeout);\r\n                    }\r\n                },\r\n                10\r\n            );\r\n        }\r\n\r\n        function isIE10OrLater(userAgent) {\r\n            var ua = userAgent.toLowerCase();\r\n            if (ua.indexOf('msie') === 0 && ua.indexOf('trident') === 0) {\r\n                return false;\r\n            }\r\n            var match = /(?:msie|rv:)\\s?([\\d\\.]+)/.exec(ua);\r\n            if (match && parseInt(match[1], 10) >= 10) {\r\n                return true;\r\n            }\r\n            return false;\r\n        }\r\n\r\n        function detectPrivateMode(callback) {\r\n            var isPrivate;\r\n\r\n            try {\r\n\r\n                if (window.webkitRequestFileSystem) {\r\n                    window.webkitRequestFileSystem(\r\n                        window.TEMPORARY, 1,\r\n                        function() {\r\n                            isPrivate = false;\r\n                        },\r\n                        function(e) {\r\n                            isPrivate = true;\r\n                        }\r\n                    );\r\n                } else if (window.indexedDB && /Firefox/.test(window.navigator.userAgent)) {\r\n                    var db;\r\n                    try {\r\n                        db = window.indexedDB.open('test');\r\n                        db.onerror = function() {\r\n                            return true;\r\n                        };\r\n                    } catch (e) {\r\n                        isPrivate = true;\r\n                    }\r\n\r\n                    if (typeof isPrivate === 'undefined') {\r\n                        retry(\r\n                            function isDone() {\r\n                                return db.readyState === 'done' ? true : false;\r\n                            },\r\n                            function next(isTimeout) {\r\n                                if (!isTimeout) {\r\n                                    isPrivate = db.result ? false : true;\r\n                                }\r\n                            }\r\n                        );\r\n                    }\r\n                } else if (isIE10OrLater(window.navigator.userAgent)) {\r\n                    isPrivate = false;\r\n                    try {\r\n                        if (!window.indexedDB) {\r\n                            isPrivate = true;\r\n                        }\r\n                    } catch (e) {\r\n                        isPrivate = true;\r\n                    }\r\n                } else if (window.localStorage && /Safari/.test(window.navigator.userAgent)) {\r\n                    try {\r\n                        window.localStorage.setItem('test', 1);\r\n                    } catch (e) {\r\n                        isPrivate = true;\r\n                    }\r\n\r\n                    if (typeof isPrivate === 'undefined') {\r\n                        isPrivate = false;\r\n                        window.localStorage.removeItem('test');\r\n                    }\r\n                }\r\n\r\n            } catch (e) {\r\n                isPrivate = false;\r\n            }\r\n\r\n            retry(\r\n                function isDone() {\r\n                    return typeof isPrivate !== 'undefined' ? true : false;\r\n                },\r\n                function next(isTimeout) {\r\n                    callback(isPrivate);\r\n                }\r\n            );\r\n        }\r\n\r\n        var isMobile = {\r\n            Android: function() {\r\n                return navigator.userAgent.match(/Android/i);\r\n            },\r\n            BlackBerry: function() {\r\n                return navigator.userAgent.match(/BlackBerry|BB10/i);\r\n            },\r\n            iOS: function() {\r\n                return navigator.userAgent.match(/iPhone|iPad|iPod/i);\r\n            },\r\n            Opera: function() {\r\n                return navigator.userAgent.match(/Opera Mini/i);\r\n            },\r\n            Windows: function() {\r\n                return navigator.userAgent.match(/IEMobile/i);\r\n            },\r\n            any: function() {\r\n                return (isMobile.Android() || isMobile.BlackBerry() || isMobile.iOS() || isMobile.Opera() || isMobile.Windows());\r\n            },\r\n            getOsName: function() {\r\n                var osName = 'Unknown OS';\r\n                if (isMobile.Android()) {\r\n                    osName = 'Android';\r\n                }\r\n\r\n                if (isMobile.BlackBerry()) {\r\n                    osName = 'BlackBerry';\r\n                }\r\n\r\n                if (isMobile.iOS()) {\r\n                    osName = 'iOS';\r\n                }\r\n\r\n                if (isMobile.Opera()) {\r\n                    osName = 'Opera Mini';\r\n                }\r\n\r\n                if (isMobile.Windows()) {\r\n                    osName = 'Windows';\r\n                }\r\n\r\n                return osName;\r\n            }\r\n        };\r\n\r\n        // via: http://jsfiddle.net/ChristianL/AVyND/\r\n        function detectDesktopOS() {\r\n            var unknown = '-';\r\n\r\n            var nVer = navigator.appVersion;\r\n            var nAgt = navigator.userAgent;\r\n\r\n            var os = unknown;\r\n            var clientStrings = [{\r\n                s: 'Windows 10',\r\n                r: /(Windows 10.0|Windows NT 10.0)/\r\n            }, {\r\n                s: 'Windows 8.1',\r\n                r: /(Windows 8.1|Windows NT 6.3)/\r\n            }, {\r\n                s: 'Windows 8',\r\n                r: /(Windows 8|Windows NT 6.2)/\r\n            }, {\r\n                s: 'Windows 7',\r\n                r: /(Windows 7|Windows NT 6.1)/\r\n            }, {\r\n                s: 'Windows Vista',\r\n                r: /Windows NT 6.0/\r\n            }, {\r\n                s: 'Windows Server 2003',\r\n                r: /Windows NT 5.2/\r\n            }, {\r\n                s: 'Windows XP',\r\n                r: /(Windows NT 5.1|Windows XP)/\r\n            }, {\r\n                s: 'Windows 2000',\r\n                r: /(Windows NT 5.0|Windows 2000)/\r\n            }, {\r\n                s: 'Windows ME',\r\n                r: /(Win 9x 4.90|Windows ME)/\r\n            }, {\r\n                s: 'Windows 98',\r\n                r: /(Windows 98|Win98)/\r\n            }, {\r\n                s: 'Windows 95',\r\n                r: /(Windows 95|Win95|Windows_95)/\r\n            }, {\r\n                s: 'Windows NT 4.0',\r\n                r: /(Windows NT 4.0|WinNT4.0|WinNT|Windows NT)/\r\n            }, {\r\n                s: 'Windows CE',\r\n                r: /Windows CE/\r\n            }, {\r\n                s: 'Windows 3.11',\r\n                r: /Win16/\r\n            }, {\r\n                s: 'Android',\r\n                r: /Android/\r\n            }, {\r\n                s: 'Open BSD',\r\n                r: /OpenBSD/\r\n            }, {\r\n                s: 'Sun OS',\r\n                r: /SunOS/\r\n            }, {\r\n                s: 'Linux',\r\n                r: /(Linux|X11)/\r\n            }, {\r\n                s: 'iOS',\r\n                r: /(iPhone|iPad|iPod)/\r\n            }, {\r\n                s: 'Mac OS X',\r\n                r: /Mac OS X/\r\n            }, {\r\n                s: 'Mac OS',\r\n                r: /(MacPPC|MacIntel|Mac_PowerPC|Macintosh)/\r\n            }, {\r\n                s: 'QNX',\r\n                r: /QNX/\r\n            }, {\r\n                s: 'UNIX',\r\n                r: /UNIX/\r\n            }, {\r\n                s: 'BeOS',\r\n                r: /BeOS/\r\n            }, {\r\n                s: 'OS/2',\r\n                r: /OS\\/2/\r\n            }, {\r\n                s: 'Search Bot',\r\n                r: /(nuhk|Googlebot|Yammybot|Openbot|Slurp|MSNBot|Ask Jeeves\\/Teoma|ia_archiver)/\r\n            }];\r\n            for (var i = 0, cs; cs = clientStrings[i]; i++) {\r\n                if (cs.r.test(nAgt)) {\r\n                    os = cs.s;\r\n                    break;\r\n                }\r\n            }\r\n\r\n            var osVersion = unknown;\r\n\r\n            if (/Windows/.test(os)) {\r\n                if (/Windows (.*)/.test(os)) {\r\n                    osVersion = /Windows (.*)/.exec(os)[1];\r\n                }\r\n                os = 'Windows';\r\n            }\r\n\r\n            switch (os) {\r\n                case 'Mac OS X':\r\n                    if (/Mac OS X (10[\\.\\_\\d]+)/.test(nAgt)) {\r\n                        osVersion = /Mac OS X (10[\\.\\_\\d]+)/.exec(nAgt)[1];\r\n                    }\r\n                    break;\r\n                case 'Android':\r\n                    if (/Android ([\\.\\_\\d]+)/.test(nAgt)) {\r\n                        osVersion = /Android ([\\.\\_\\d]+)/.exec(nAgt)[1];\r\n                    }\r\n                    break;\r\n                case 'iOS':\r\n                    if (/OS (\\d+)_(\\d+)_?(\\d+)?/.test(nAgt)) {\r\n                        osVersion = /OS (\\d+)_(\\d+)_?(\\d+)?/.exec(nVer);\r\n                        osVersion = osVersion[1] + '.' + osVersion[2] + '.' + (osVersion[3] | 0);\r\n                    }\r\n                    break;\r\n            }\r\n\r\n            return {\r\n                osName: os,\r\n                osVersion: osVersion\r\n            };\r\n        }\r\n\r\n        var osName = 'Unknown OS';\r\n        var osVersion = 'Unknown OS Version';\r\n\r\n        function getAndroidVersion(ua) {\r\n            ua = (ua || navigator.userAgent).toLowerCase();\r\n            var match = ua.match(/android\\s([0-9\\.]*)/);\r\n            return match ? match[1] : false;\r\n        }\r\n\r\n        var osInfo = detectDesktopOS();\r\n\r\n        if (osInfo && osInfo.osName && osInfo.osName != '-') {\r\n            osName = osInfo.osName;\r\n            osVersion = osInfo.osVersion;\r\n        } else if (isMobile.any()) {\r\n            osName = isMobile.getOsName();\r\n\r\n            if (osName == 'Android') {\r\n                osVersion = getAndroidVersion();\r\n            }\r\n        }\r\n\r\n        var isNodejs = typeof process === 'object' && typeof process.versions === 'object' && process.versions.node;\r\n\r\n        if (osName === 'Unknown OS' && isNodejs) {\r\n            osName = 'Nodejs';\r\n            osVersion = process.versions.node.toString().replace('v', '');\r\n        }\r\n\r\n        var isCanvasSupportsStreamCapturing = false;\r\n        var isVideoSupportsStreamCapturing = false;\r\n        ['captureStream', 'mozCaptureStream', 'webkitCaptureStream'].forEach(function(item) {\r\n            if (typeof document === 'undefined' || typeof document.createElement !== 'function') {\r\n                return;\r\n            }\r\n\r\n            if (!isCanvasSupportsStreamCapturing && item in document.createElement('canvas')) {\r\n                isCanvasSupportsStreamCapturing = true;\r\n            }\r\n\r\n            if (!isVideoSupportsStreamCapturing && item in document.createElement('video')) {\r\n                isVideoSupportsStreamCapturing = true;\r\n            }\r\n        });\r\n\r\n        var regexIpv4Local = /^(192\\.168\\.|169\\.254\\.|10\\.|172\\.(1[6-9]|2\\d|3[01]))/,\r\n            regexIpv4 = /([0-9]{1,3}(\\.[0-9]{1,3}){3})/,\r\n            regexIpv6 = /[a-f0-9]{1,4}(:[a-f0-9]{1,4}){7}/;\r\n\r\n        // via: https://github.com/diafygi/webrtc-ips\r\n        function DetectLocalIPAddress(callback, stream) {\r\n            if (!DetectRTC.isWebRTCSupported) {\r\n                return;\r\n            }\r\n\r\n            var isPublic = true,\r\n                isIpv4 = true;\r\n            getIPs(function(ip) {\r\n                if (!ip) {\r\n                    callback(); // Pass nothing to tell that ICE-gathering-ended\r\n                } else if (ip.match(regexIpv4Local)) {\r\n                    isPublic = false;\r\n                    callback('Local: ' + ip, isPublic, isIpv4);\r\n                } else if (ip.match(regexIpv6)) { //via https://ourcodeworld.com/articles/read/257/how-to-get-the-client-ip-address-with-javascript-only\r\n                    isIpv4 = false;\r\n                    callback('Public: ' + ip, isPublic, isIpv4);\r\n                } else {\r\n                    callback('Public: ' + ip, isPublic, isIpv4);\r\n                }\r\n            }, stream);\r\n        }\r\n\r\n        function getIPs(callback, stream) {\r\n            if (typeof document === 'undefined' || typeof document.getElementById !== 'function') {\r\n                return;\r\n            }\r\n\r\n            var ipDuplicates = {};\r\n\r\n            var RTCPeerConnection = window.RTCPeerConnection || window.mozRTCPeerConnection || window.webkitRTCPeerConnection;\r\n\r\n            if (!RTCPeerConnection) {\r\n                var iframe = document.getElementById('iframe');\r\n                if (!iframe) {\r\n                    return;\r\n                }\r\n                var win = iframe.contentWindow;\r\n                RTCPeerConnection = win.RTCPeerConnection || win.mozRTCPeerConnection || win.webkitRTCPeerConnection;\r\n            }\r\n\r\n            if (!RTCPeerConnection) {\r\n                return;\r\n            }\r\n\r\n            var peerConfig = null;\r\n\r\n            if (DetectRTC.browser === 'Chrome' && DetectRTC.browser.version < 58) {\r\n                // todo: add support for older Opera\r\n                peerConfig = {\r\n                    optional: [{\r\n                        RtpDataChannels: true\r\n                    }]\r\n                };\r\n            }\r\n\r\n            var servers = {\r\n                iceServers: [{\r\n                    urls: 'stun:stun.l.google.com:19302'\r\n                }]\r\n            };\r\n\r\n            var pc = new RTCPeerConnection(servers, peerConfig);\r\n\r\n            if (stream) {\r\n                if (pc.addStream) {\r\n                    pc.addStream(stream);\r\n                } else if (pc.addTrack && stream.getTracks()[0]) {\r\n                    pc.addTrack(stream.getTracks()[0], stream);\r\n                }\r\n            }\r\n\r\n            function handleCandidate(candidate) {\r\n                if (!candidate) {\r\n                    callback(); // Pass nothing to tell that ICE-gathering-ended\r\n                    return;\r\n                }\r\n\r\n                var match = regexIpv4.exec(candidate);\r\n                if (!match) {\r\n                    return;\r\n                }\r\n                var ipAddress = match[1];\r\n                var isPublic = (candidate.match(regexIpv4Local)),\r\n                    isIpv4 = true;\r\n\r\n                if (ipDuplicates[ipAddress] === undefined) {\r\n                    callback(ipAddress, isPublic, isIpv4);\r\n                }\r\n\r\n                ipDuplicates[ipAddress] = true;\r\n            }\r\n\r\n            // listen for candidate events\r\n            pc.onicecandidate = function(event) {\r\n                if (event.candidate && event.candidate.candidate) {\r\n                    handleCandidate(event.candidate.candidate);\r\n                } else {\r\n                    handleCandidate(); // Pass nothing to tell that ICE-gathering-ended\r\n                }\r\n            };\r\n\r\n            // create data channel\r\n            if (!stream) {\r\n                try {\r\n                    pc.createDataChannel('sctp', {});\r\n                } catch (e) {}\r\n            }\r\n\r\n            // create an offer sdp\r\n            if (DetectRTC.isPromisesSupported) {\r\n                pc.createOffer().then(function(result) {\r\n                    pc.setLocalDescription(result).then(afterCreateOffer);\r\n                });\r\n            } else {\r\n                pc.createOffer(function(result) {\r\n                    pc.setLocalDescription(result, afterCreateOffer, function() {});\r\n                }, function() {});\r\n            }\r\n\r\n            function afterCreateOffer() {\r\n                var lines = pc.localDescription.sdp.split('\\n');\r\n\r\n                lines.forEach(function(line) {\r\n                    if (line && line.indexOf('a=candidate:') === 0) {\r\n                        handleCandidate(line);\r\n                    }\r\n                });\r\n            }\r\n        }\r\n\r\n        var MediaDevices = [];\r\n\r\n        var audioInputDevices = [];\r\n        var audioOutputDevices = [];\r\n        var videoInputDevices = [];\r\n\r\n        if (navigator.mediaDevices && navigator.mediaDevices.enumerateDevices) {\r\n            // Firefox 38+ seems having support of enumerateDevices\r\n            // Thanks @xdumaine/enumerateDevices\r\n            navigator.enumerateDevices = function(callback) {\r\n                var enumerateDevices = navigator.mediaDevices.enumerateDevices();\r\n                if (enumerateDevices && enumerateDevices.then) {\r\n                    navigator.mediaDevices.enumerateDevices().then(callback).catch(function() {\r\n                        callback([]);\r\n                    });\r\n                } else {\r\n                    callback([]);\r\n                }\r\n            };\r\n        }\r\n\r\n        // Media Devices detection\r\n        var canEnumerate = false;\r\n\r\n        /*global MediaStreamTrack:true */\r\n        if (typeof MediaStreamTrack !== 'undefined' && 'getSources' in MediaStreamTrack) {\r\n            canEnumerate = true;\r\n        } else if (navigator.mediaDevices && !!navigator.mediaDevices.enumerateDevices) {\r\n            canEnumerate = true;\r\n        }\r\n\r\n        var hasMicrophone = false;\r\n        var hasSpeakers = false;\r\n        var hasWebcam = false;\r\n\r\n        var isWebsiteHasMicrophonePermissions = false;\r\n        var isWebsiteHasWebcamPermissions = false;\r\n\r\n        // http://dev.w3.org/2011/webrtc/editor/getusermedia.html#mediadevices\r\n        function checkDeviceSupport(callback) {\r\n            if (!canEnumerate) {\r\n                if (callback) {\r\n                    callback();\r\n                }\r\n                return;\r\n            }\r\n\r\n            if (!navigator.enumerateDevices && window.MediaStreamTrack && window.MediaStreamTrack.getSources) {\r\n                navigator.enumerateDevices = window.MediaStreamTrack.getSources.bind(window.MediaStreamTrack);\r\n            }\r\n\r\n            if (!navigator.enumerateDevices && navigator.enumerateDevices) {\r\n                navigator.enumerateDevices = navigator.enumerateDevices.bind(navigator);\r\n            }\r\n\r\n            if (!navigator.enumerateDevices) {\r\n                if (callback) {\r\n                    callback();\r\n                }\r\n                return;\r\n            }\r\n\r\n            MediaDevices = [];\r\n\r\n            audioInputDevices = [];\r\n            audioOutputDevices = [];\r\n            videoInputDevices = [];\r\n\r\n            hasMicrophone = false;\r\n            hasSpeakers = false;\r\n            hasWebcam = false;\r\n\r\n            isWebsiteHasMicrophonePermissions = false;\r\n            isWebsiteHasWebcamPermissions = false;\r\n\r\n            // to prevent duplication\r\n            var alreadyUsedDevices = {};\r\n\r\n            navigator.enumerateDevices(function(devices) {\r\n                devices.forEach(function(_device) {\r\n                    var device = {};\r\n                    for (var d in _device) {\r\n                        try {\r\n                            if (typeof _device[d] !== 'function') {\r\n                                device[d] = _device[d];\r\n                            }\r\n                        } catch (e) {}\r\n                    }\r\n\r\n                    if (alreadyUsedDevices[device.deviceId + device.label + device.kind]) {\r\n                        return;\r\n                    }\r\n\r\n                    // if it is MediaStreamTrack.getSources\r\n                    if (device.kind === 'audio') {\r\n                        device.kind = 'audioinput';\r\n                    }\r\n\r\n                    if (device.kind === 'video') {\r\n                        device.kind = 'videoinput';\r\n                    }\r\n\r\n                    if (!device.deviceId) {\r\n                        device.deviceId = device.id;\r\n                    }\r\n\r\n                    if (!device.id) {\r\n                        device.id = device.deviceId;\r\n                    }\r\n\r\n                    if (!device.label) {\r\n                        device.isCustomLabel = true;\r\n\r\n                        if (device.kind === 'videoinput') {\r\n                            device.label = 'Camera ' + (videoInputDevices.length + 1);\r\n                        } else if (device.kind === 'audioinput') {\r\n                            device.label = 'Microphone ' + (audioInputDevices.length + 1);\r\n                        } else if (device.kind === 'audiooutput') {\r\n                            device.label = 'Speaker ' + (audioOutputDevices.length + 1);\r\n                        } else {\r\n                            device.label = 'Please invoke getUserMedia once.';\r\n                        }\r\n\r\n                        if (typeof DetectRTC !== 'undefined' && DetectRTC.browser.isChrome && DetectRTC.browser.version >= 46 && !/^(https:|chrome-extension:)$/g.test(location.protocol || '')) {\r\n                            if (typeof document !== 'undefined' && typeof document.domain === 'string' && document.domain.search && document.domain.search(/localhost|127.0./g) === -1) {\r\n                                device.label = 'HTTPs is required to get label of this ' + device.kind + ' device.';\r\n                            }\r\n                        }\r\n                    } else {\r\n                        // Firefox on Android still returns empty label\r\n                        if (device.kind === 'videoinput' && !isWebsiteHasWebcamPermissions) {\r\n                            isWebsiteHasWebcamPermissions = true;\r\n                        }\r\n\r\n                        if (device.kind === 'audioinput' && !isWebsiteHasMicrophonePermissions) {\r\n                            isWebsiteHasMicrophonePermissions = true;\r\n                        }\r\n                    }\r\n\r\n                    if (device.kind === 'audioinput') {\r\n                        hasMicrophone = true;\r\n\r\n                        if (audioInputDevices.indexOf(device) === -1) {\r\n                            audioInputDevices.push(device);\r\n                        }\r\n                    }\r\n\r\n                    if (device.kind === 'audiooutput') {\r\n                        hasSpeakers = true;\r\n\r\n                        if (audioOutputDevices.indexOf(device) === -1) {\r\n                            audioOutputDevices.push(device);\r\n                        }\r\n                    }\r\n\r\n                    if (device.kind === 'videoinput') {\r\n                        hasWebcam = true;\r\n\r\n                        if (videoInputDevices.indexOf(device) === -1) {\r\n                            videoInputDevices.push(device);\r\n                        }\r\n                    }\r\n\r\n                    // there is no 'videoouput' in the spec.\r\n                    MediaDevices.push(device);\r\n\r\n                    alreadyUsedDevices[device.deviceId + device.label + device.kind] = device;\r\n                });\r\n\r\n                if (typeof DetectRTC !== 'undefined') {\r\n                    // to sync latest outputs\r\n                    DetectRTC.MediaDevices = MediaDevices;\r\n                    DetectRTC.hasMicrophone = hasMicrophone;\r\n                    DetectRTC.hasSpeakers = hasSpeakers;\r\n                    DetectRTC.hasWebcam = hasWebcam;\r\n\r\n                    DetectRTC.isWebsiteHasWebcamPermissions = isWebsiteHasWebcamPermissions;\r\n                    DetectRTC.isWebsiteHasMicrophonePermissions = isWebsiteHasMicrophonePermissions;\r\n\r\n                    DetectRTC.audioInputDevices = audioInputDevices;\r\n                    DetectRTC.audioOutputDevices = audioOutputDevices;\r\n                    DetectRTC.videoInputDevices = videoInputDevices;\r\n                }\r\n\r\n                if (callback) {\r\n                    callback();\r\n                }\r\n            });\r\n        }\r\n\r\n        var DetectRTC = window.DetectRTC || {};\r\n\r\n        // ----------\r\n        // DetectRTC.browser.name || DetectRTC.browser.version || DetectRTC.browser.fullVersion\r\n        DetectRTC.browser = getBrowserInfo();\r\n\r\n        detectPrivateMode(function(isPrivateBrowsing) {\r\n            DetectRTC.browser.isPrivateBrowsing = !!isPrivateBrowsing;\r\n        });\r\n\r\n        // DetectRTC.isChrome || DetectRTC.isFirefox || DetectRTC.isEdge\r\n        DetectRTC.browser['is' + DetectRTC.browser.name] = true;\r\n\r\n        // -----------\r\n        DetectRTC.osName = osName;\r\n        DetectRTC.osVersion = osVersion;\r\n\r\n        var isNodeWebkit = typeof process === 'object' && typeof process.versions === 'object' && process.versions['node-webkit'];\r\n\r\n        // --------- Detect if system supports WebRTC 1.0 or WebRTC 1.1.\r\n        var isWebRTCSupported = false;\r\n        ['RTCPeerConnection', 'webkitRTCPeerConnection', 'mozRTCPeerConnection', 'RTCIceGatherer'].forEach(function(item) {\r\n            if (isWebRTCSupported) {\r\n                return;\r\n            }\r\n\r\n            if (item in window) {\r\n                isWebRTCSupported = true;\r\n            }\r\n        });\r\n        DetectRTC.isWebRTCSupported = isWebRTCSupported;\r\n\r\n        //-------\r\n        DetectRTC.isORTCSupported = typeof RTCIceGatherer !== 'undefined';\r\n\r\n        // --------- Detect if system supports screen capturing API\r\n        var isScreenCapturingSupported = false;\r\n        if (DetectRTC.browser.isChrome && DetectRTC.browser.version >= 35) {\r\n            isScreenCapturingSupported = true;\r\n        } else if (DetectRTC.browser.isFirefox && DetectRTC.browser.version >= 34) {\r\n            isScreenCapturingSupported = true;\r\n        } else if (DetectRTC.browser.isEdge && DetectRTC.browser.version >= 17) {\r\n            isScreenCapturingSupported = true; // navigator.getDisplayMedia\r\n        } else if (DetectRTC.osName === 'Android' && DetectRTC.browser.isChrome) {\r\n            isScreenCapturingSupported = true;\r\n        }\r\n\r\n        if (!/^(https:|chrome-extension:)$/g.test(location.protocol || '')) {\r\n            var isNonLocalHost = typeof document !== 'undefined' && typeof document.domain === 'string' && document.domain.search && document.domain.search(/localhost|127.0./g) === -1;\r\n            if (isNonLocalHost && (DetectRTC.browser.isChrome || DetectRTC.browser.isEdge || DetectRTC.browser.isOpera)) {\r\n                isScreenCapturingSupported = false;\r\n            } else if (DetectRTC.browser.isFirefox) {\r\n                isScreenCapturingSupported = false;\r\n            }\r\n        }\r\n        DetectRTC.isScreenCapturingSupported = isScreenCapturingSupported;\r\n\r\n        // --------- Detect if WebAudio API are supported\r\n        var webAudio = {\r\n            isSupported: false,\r\n            isCreateMediaStreamSourceSupported: false\r\n        };\r\n\r\n        ['AudioContext', 'webkitAudioContext', 'mozAudioContext', 'msAudioContext'].forEach(function(item) {\r\n            if (webAudio.isSupported) {\r\n                return;\r\n            }\r\n\r\n            if (item in window) {\r\n                webAudio.isSupported = true;\r\n\r\n                if (window[item] && 'createMediaStreamSource' in window[item].prototype) {\r\n                    webAudio.isCreateMediaStreamSourceSupported = true;\r\n                }\r\n            }\r\n        });\r\n        DetectRTC.isAudioContextSupported = webAudio.isSupported;\r\n        DetectRTC.isCreateMediaStreamSourceSupported = webAudio.isCreateMediaStreamSourceSupported;\r\n\r\n        // ---------- Detect if SCTP/RTP channels are supported.\r\n\r\n        var isRtpDataChannelsSupported = false;\r\n        if (DetectRTC.browser.isChrome && DetectRTC.browser.version > 31) {\r\n            isRtpDataChannelsSupported = true;\r\n        }\r\n        DetectRTC.isRtpDataChannelsSupported = isRtpDataChannelsSupported;\r\n\r\n        var isSCTPSupportd = false;\r\n        if (DetectRTC.browser.isFirefox && DetectRTC.browser.version > 28) {\r\n            isSCTPSupportd = true;\r\n        } else if (DetectRTC.browser.isChrome && DetectRTC.browser.version > 25) {\r\n            isSCTPSupportd = true;\r\n        } else if (DetectRTC.browser.isOpera && DetectRTC.browser.version >= 11) {\r\n            isSCTPSupportd = true;\r\n        }\r\n        DetectRTC.isSctpDataChannelsSupported = isSCTPSupportd;\r\n\r\n        // ---------\r\n\r\n        DetectRTC.isMobileDevice = isMobileDevice; // \"isMobileDevice\" boolean is defined in \"getBrowserInfo.js\"\r\n\r\n        // ------\r\n        var isGetUserMediaSupported = false;\r\n        if (navigator.getUserMedia) {\r\n            isGetUserMediaSupported = true;\r\n        } else if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {\r\n            isGetUserMediaSupported = true;\r\n        }\r\n\r\n        if (DetectRTC.browser.isChrome && DetectRTC.browser.version >= 46 && !/^(https:|chrome-extension:)$/g.test(location.protocol || '')) {\r\n            if (typeof document !== 'undefined' && typeof document.domain === 'string' && document.domain.search && document.domain.search(/localhost|127.0./g) === -1) {\r\n                isGetUserMediaSupported = 'Requires HTTPs';\r\n            }\r\n        }\r\n\r\n        if (DetectRTC.osName === 'Nodejs') {\r\n            isGetUserMediaSupported = false;\r\n        }\r\n        DetectRTC.isGetUserMediaSupported = isGetUserMediaSupported;\r\n\r\n        var displayResolution = '';\r\n        if (screen.width) {\r\n            var width = (screen.width) ? screen.width : '';\r\n            var height = (screen.height) ? screen.height : '';\r\n            displayResolution += '' + width + ' x ' + height;\r\n        }\r\n        DetectRTC.displayResolution = displayResolution;\r\n\r\n        function getAspectRatio(w, h) {\r\n            function gcd(a, b) {\r\n                return (b == 0) ? a : gcd(b, a % b);\r\n            }\r\n            var r = gcd(w, h);\r\n            return (w / r) / (h / r);\r\n        }\r\n\r\n        DetectRTC.displayAspectRatio = getAspectRatio(screen.width, screen.height).toFixed(2);\r\n\r\n        // ----------\r\n        DetectRTC.isCanvasSupportsStreamCapturing = isCanvasSupportsStreamCapturing;\r\n        DetectRTC.isVideoSupportsStreamCapturing = isVideoSupportsStreamCapturing;\r\n\r\n        if (DetectRTC.browser.name == 'Chrome' && DetectRTC.browser.version >= 53) {\r\n            if (!DetectRTC.isCanvasSupportsStreamCapturing) {\r\n                DetectRTC.isCanvasSupportsStreamCapturing = 'Requires chrome flag: enable-experimental-web-platform-features';\r\n            }\r\n\r\n            if (!DetectRTC.isVideoSupportsStreamCapturing) {\r\n                DetectRTC.isVideoSupportsStreamCapturing = 'Requires chrome flag: enable-experimental-web-platform-features';\r\n            }\r\n        }\r\n\r\n        // ------\r\n        DetectRTC.DetectLocalIPAddress = DetectLocalIPAddress;\r\n\r\n        DetectRTC.isWebSocketsSupported = 'WebSocket' in window && 2 === window.WebSocket.CLOSING;\r\n        DetectRTC.isWebSocketsBlocked = !DetectRTC.isWebSocketsSupported;\r\n\r\n        if (DetectRTC.osName === 'Nodejs') {\r\n            DetectRTC.isWebSocketsSupported = true;\r\n            DetectRTC.isWebSocketsBlocked = false;\r\n        }\r\n\r\n        DetectRTC.checkWebSocketsSupport = function(callback) {\r\n            callback = callback || function() {};\r\n            try {\r\n                var starttime;\r\n                var websocket = new WebSocket('wss://echo.websocket.org:443/');\r\n                websocket.onopen = function() {\r\n                    DetectRTC.isWebSocketsBlocked = false;\r\n                    starttime = (new Date).getTime();\r\n                    websocket.send('ping');\r\n                };\r\n                websocket.onmessage = function() {\r\n                    DetectRTC.WebsocketLatency = (new Date).getTime() - starttime + 'ms';\r\n                    callback();\r\n                    websocket.close();\r\n                    websocket = null;\r\n                };\r\n                websocket.onerror = function() {\r\n                    DetectRTC.isWebSocketsBlocked = true;\r\n                    callback();\r\n                };\r\n            } catch (e) {\r\n                DetectRTC.isWebSocketsBlocked = true;\r\n                callback();\r\n            }\r\n        };\r\n\r\n        // -------\r\n        DetectRTC.load = function(callback) {\r\n            callback = callback || function() {};\r\n            checkDeviceSupport(callback);\r\n        };\r\n\r\n        // check for microphone/camera support!\r\n        if (typeof checkDeviceSupport === 'function') {\r\n            // checkDeviceSupport();\r\n        }\r\n\r\n        if (typeof MediaDevices !== 'undefined') {\r\n            DetectRTC.MediaDevices = MediaDevices;\r\n        } else {\r\n            DetectRTC.MediaDevices = [];\r\n        }\r\n\r\n        DetectRTC.hasMicrophone = hasMicrophone;\r\n        DetectRTC.hasSpeakers = hasSpeakers;\r\n        DetectRTC.hasWebcam = hasWebcam;\r\n\r\n        DetectRTC.isWebsiteHasWebcamPermissions = isWebsiteHasWebcamPermissions;\r\n        DetectRTC.isWebsiteHasMicrophonePermissions = isWebsiteHasMicrophonePermissions;\r\n\r\n        DetectRTC.audioInputDevices = audioInputDevices;\r\n        DetectRTC.audioOutputDevices = audioOutputDevices;\r\n        DetectRTC.videoInputDevices = videoInputDevices;\r\n\r\n        // ------\r\n        var isSetSinkIdSupported = false;\r\n        if (typeof document !== 'undefined' && typeof document.createElement === 'function' && 'setSinkId' in document.createElement('video')) {\r\n            isSetSinkIdSupported = true;\r\n        }\r\n        DetectRTC.isSetSinkIdSupported = isSetSinkIdSupported;\r\n\r\n        // -----\r\n        var isRTPSenderReplaceTracksSupported = false;\r\n        if (DetectRTC.browser.isFirefox && typeof mozRTCPeerConnection !== 'undefined' /*&& DetectRTC.browser.version > 39*/ ) {\r\n            /*global mozRTCPeerConnection:true */\r\n            if ('getSenders' in mozRTCPeerConnection.prototype) {\r\n                isRTPSenderReplaceTracksSupported = true;\r\n            }\r\n        } else if (DetectRTC.browser.isChrome && typeof webkitRTCPeerConnection !== 'undefined') {\r\n            /*global webkitRTCPeerConnection:true */\r\n            if ('getSenders' in webkitRTCPeerConnection.prototype) {\r\n                isRTPSenderReplaceTracksSupported = true;\r\n            }\r\n        }\r\n        DetectRTC.isRTPSenderReplaceTracksSupported = isRTPSenderReplaceTracksSupported;\r\n\r\n        //------\r\n        var isRemoteStreamProcessingSupported = false;\r\n        if (DetectRTC.browser.isFirefox && DetectRTC.browser.version > 38) {\r\n            isRemoteStreamProcessingSupported = true;\r\n        }\r\n        DetectRTC.isRemoteStreamProcessingSupported = isRemoteStreamProcessingSupported;\r\n\r\n        //-------\r\n        var isApplyConstraintsSupported = false;\r\n\r\n        /*global MediaStreamTrack:true */\r\n        if (typeof MediaStreamTrack !== 'undefined' && 'applyConstraints' in MediaStreamTrack.prototype) {\r\n            isApplyConstraintsSupported = true;\r\n        }\r\n        DetectRTC.isApplyConstraintsSupported = isApplyConstraintsSupported;\r\n\r\n        //-------\r\n        var isMultiMonitorScreenCapturingSupported = false;\r\n        if (DetectRTC.browser.isFirefox && DetectRTC.browser.version >= 43) {\r\n            // version 43 merely supports platforms for multi-monitors\r\n            // version 44 will support exact multi-monitor selection i.e. you can select any monitor for screen capturing.\r\n            isMultiMonitorScreenCapturingSupported = true;\r\n        }\r\n        DetectRTC.isMultiMonitorScreenCapturingSupported = isMultiMonitorScreenCapturingSupported;\r\n\r\n        DetectRTC.isPromisesSupported = !!('Promise' in window);\r\n\r\n        // version is generated by \"grunt\"\r\n        DetectRTC.version = '1.3.9';\r\n\r\n        if (typeof DetectRTC === 'undefined') {\r\n            window.DetectRTC = {};\r\n        }\r\n\r\n        var MediaStream = window.MediaStream;\r\n\r\n        if (typeof MediaStream === 'undefined' && typeof webkitMediaStream !== 'undefined') {\r\n            MediaStream = webkitMediaStream;\r\n        }\r\n\r\n        if (typeof MediaStream !== 'undefined' && typeof MediaStream === 'function') {\r\n            DetectRTC.MediaStream = Object.keys(MediaStream.prototype);\r\n        } else DetectRTC.MediaStream = false;\r\n\r\n        if (typeof MediaStreamTrack !== 'undefined') {\r\n            DetectRTC.MediaStreamTrack = Object.keys(MediaStreamTrack.prototype);\r\n        } else DetectRTC.MediaStreamTrack = false;\r\n\r\n        var RTCPeerConnection = window.RTCPeerConnection || window.mozRTCPeerConnection || window.webkitRTCPeerConnection;\r\n\r\n        if (typeof RTCPeerConnection !== 'undefined') {\r\n            DetectRTC.RTCPeerConnection = Object.keys(RTCPeerConnection.prototype);\r\n        } else DetectRTC.RTCPeerConnection = false;\r\n\r\n        window.DetectRTC = DetectRTC;\r\n\r\n        if (typeof module !== 'undefined' /* && !!module.exports*/ ) {\r\n            module.exports = DetectRTC;\r\n        }\r\n\r\n        if (typeof define === 'function' && define.amd) {\r\n            define('DetectRTC', [], function() {\r\n                return DetectRTC;\r\n            });\r\n        }\r\n    })();\r\n\r\n    // globals.js\r\n\r\n    if (typeof cordova !== 'undefined') {\r\n        DetectRTC.isMobileDevice = true;\r\n        DetectRTC.browser.name = 'Chrome';\r\n    }\r\n\r\n    if (navigator && navigator.userAgent && navigator.userAgent.indexOf('Crosswalk') !== -1) {\r\n        DetectRTC.isMobileDevice = true;\r\n        DetectRTC.browser.name = 'Chrome';\r\n    }\r\n\r\n    function fireEvent(obj, eventName, args) {\r\n        if (typeof CustomEvent === 'undefined') {\r\n            return;\r\n        }\r\n\r\n        var eventDetail = {\r\n            arguments: args,\r\n            __exposedProps__: args\r\n        };\r\n\r\n        var event = new CustomEvent(eventName, eventDetail);\r\n        obj.dispatchEvent(event);\r\n    }\r\n\r\n    function setHarkEvents(connection, streamEvent) {\r\n        if (!streamEvent.stream || !getTracks(streamEvent.stream, 'audio').length) return;\r\n\r\n        if (!connection || !streamEvent) {\r\n            throw 'Both arguments are required.';\r\n        }\r\n\r\n        if (!connection.onspeaking || !connection.onsilence) {\r\n            return;\r\n        }\r\n\r\n        if (typeof hark === 'undefined') {\r\n            throw 'hark.js not found.';\r\n        }\r\n\r\n        hark(streamEvent.stream, {\r\n            onspeaking: function() {\r\n                connection.onspeaking(streamEvent);\r\n            },\r\n            onsilence: function() {\r\n                connection.onsilence(streamEvent);\r\n            },\r\n            onvolumechange: function(volume, threshold) {\r\n                if (!connection.onvolumechange) {\r\n                    return;\r\n                }\r\n                connection.onvolumechange(merge({\r\n                    volume: volume,\r\n                    threshold: threshold\r\n                }, streamEvent));\r\n            }\r\n        });\r\n    }\r\n\r\n    function setMuteHandlers(connection, streamEvent) {\r\n        if (!streamEvent.stream || !streamEvent.stream || !streamEvent.stream.addEventListener) return;\r\n\r\n        streamEvent.stream.addEventListener('mute', function(event) {\r\n            event = connection.streamEvents[streamEvent.streamid];\r\n\r\n            event.session = {\r\n                audio: event.muteType === 'audio',\r\n                video: event.muteType === 'video'\r\n            };\r\n\r\n            connection.onmute(event);\r\n        }, false);\r\n\r\n        streamEvent.stream.addEventListener('unmute', function(event) {\r\n            event = connection.streamEvents[streamEvent.streamid];\r\n\r\n            event.session = {\r\n                audio: event.unmuteType === 'audio',\r\n                video: event.unmuteType === 'video'\r\n            };\r\n\r\n            connection.onunmute(event);\r\n        }, false);\r\n    }\r\n\r\n    function getRandomString() {\r\n        if (window.crypto && window.crypto.getRandomValues && navigator.userAgent.indexOf('Safari') === -1) {\r\n            var a = window.crypto.getRandomValues(new Uint32Array(3)),\r\n                token = '';\r\n            for (var i = 0, l = a.length; i < l; i++) {\r\n                token += a[i].toString(36);\r\n            }\r\n            return token;\r\n        } else {\r\n            return (Math.random() * new Date().getTime()).toString(36).replace(/\\./g, '');\r\n        }\r\n    }\r\n\r\n    // Get HTMLAudioElement/HTMLVideoElement accordingly\r\n    // todo: add API documentation for connection.autoCreateMediaElement\r\n\r\n    function getRMCMediaElement(stream, callback, connection) {\r\n        if (!connection.autoCreateMediaElement) {\r\n            callback({});\r\n            return;\r\n        }\r\n\r\n        var isAudioOnly = false;\r\n        if (!getTracks(stream, 'video').length && !stream.isVideo && !stream.isScreen) {\r\n            isAudioOnly = true;\r\n        }\r\n\r\n        if (DetectRTC.browser.name === 'Firefox') {\r\n            if (connection.session.video || connection.session.screen) {\r\n                isAudioOnly = false;\r\n            }\r\n        }\r\n\r\n        var mediaElement = document.createElement(isAudioOnly ? 'audio' : 'video');\r\n\r\n        mediaElement.srcObject = stream;\r\n\r\n        mediaElement.setAttribute('autoplay', true);\r\n        mediaElement.setAttribute('playsinline', true);\r\n        mediaElement.setAttribute('controls', true);\r\n        mediaElement.setAttribute('muted', false);\r\n        mediaElement.setAttribute('volume', 1);\r\n\r\n        // http://goo.gl/WZ5nFl\r\n        // Firefox don't yet support onended for any stream (remote/local)\r\n        if (DetectRTC.browser.name === 'Firefox') {\r\n            var streamEndedEvent = 'ended';\r\n\r\n            if ('oninactive' in mediaElement) {\r\n                streamEndedEvent = 'inactive';\r\n            }\r\n\r\n            mediaElement.addEventListener(streamEndedEvent, function() {\r\n                // fireEvent(stream, streamEndedEvent, stream);\r\n                currentUserMediaRequest.remove(stream.idInstance);\r\n\r\n                if (stream.type === 'local') {\r\n                    streamEndedEvent = 'ended';\r\n\r\n                    if ('oninactive' in stream) {\r\n                        streamEndedEvent = 'inactive';\r\n                    }\r\n\r\n                    StreamsHandler.onSyncNeeded(stream.streamid, streamEndedEvent);\r\n\r\n                    connection.attachStreams.forEach(function(aStream, idx) {\r\n                        if (stream.streamid === aStream.streamid) {\r\n                            delete connection.attachStreams[idx];\r\n                        }\r\n                    });\r\n\r\n                    var newStreamsArray = [];\r\n                    connection.attachStreams.forEach(function(aStream) {\r\n                        if (aStream) {\r\n                            newStreamsArray.push(aStream);\r\n                        }\r\n                    });\r\n                    connection.attachStreams = newStreamsArray;\r\n\r\n                    var streamEvent = connection.streamEvents[stream.streamid];\r\n\r\n                    if (streamEvent) {\r\n                        connection.onstreamended(streamEvent);\r\n                        return;\r\n                    }\r\n                    if (this.parentNode) {\r\n                        this.parentNode.removeChild(this);\r\n                    }\r\n                }\r\n            }, false);\r\n        }\r\n\r\n        var played = mediaElement.play();\r\n        if (typeof played !== 'undefined') {\r\n            var cbFired = false;\r\n            setTimeout(function() {\r\n                if (!cbFired) {\r\n                    cbFired = true;\r\n                    callback(mediaElement);\r\n                }\r\n            }, 1000);\r\n            played.then(function() {\r\n                if (cbFired) return;\r\n                cbFired = true;\r\n                callback(mediaElement);\r\n            }).catch(function(error) {\r\n                if (cbFired) return;\r\n                cbFired = true;\r\n                callback(mediaElement);\r\n            });\r\n        } else {\r\n            callback(mediaElement);\r\n        }\r\n    }\r\n\r\n    // if IE\r\n    if (!window.addEventListener) {\r\n        window.addEventListener = function(el, eventName, eventHandler) {\r\n            if (!el.attachEvent) {\r\n                return;\r\n            }\r\n            el.attachEvent('on' + eventName, eventHandler);\r\n        };\r\n    }\r\n\r\n    function listenEventHandler(eventName, eventHandler) {\r\n        window.removeEventListener(eventName, eventHandler);\r\n        window.addEventListener(eventName, eventHandler, false);\r\n    }\r\n\r\n    window.attachEventListener = function(video, type, listener, useCapture) {\r\n        video.addEventListener(type, listener, useCapture);\r\n    };\r\n\r\n    function removeNullEntries(array) {\r\n        var newArray = [];\r\n        array.forEach(function(item) {\r\n            if (item) {\r\n                newArray.push(item);\r\n            }\r\n        });\r\n        return newArray;\r\n    }\r\n\r\n\r\n    function isData(session) {\r\n        return !session.audio && !session.video && !session.screen && session.data;\r\n    }\r\n\r\n    function isNull(obj) {\r\n        return typeof obj === 'undefined';\r\n    }\r\n\r\n    function isString(obj) {\r\n        return typeof obj === 'string';\r\n    }\r\n\r\n    var MediaStream = window.MediaStream;\r\n\r\n    if (typeof MediaStream === 'undefined' && typeof webkitMediaStream !== 'undefined') {\r\n        MediaStream = webkitMediaStream;\r\n    }\r\n\r\n    /*global MediaStream:true */\r\n    if (typeof MediaStream !== 'undefined') {\r\n        if (!('stop' in MediaStream.prototype)) {\r\n            MediaStream.prototype.stop = function() {\r\n                this.getTracks().forEach(function(track) {\r\n                    track.stop();\r\n                });\r\n            };\r\n        }\r\n    }\r\n\r\n    function isAudioPlusTab(connection, audioPlusTab) {\r\n        if (connection.session.audio && connection.session.audio === 'two-way') {\r\n            return false;\r\n        }\r\n\r\n        if (DetectRTC.browser.name === 'Firefox' && audioPlusTab !== false) {\r\n            return true;\r\n        }\r\n\r\n        if (DetectRTC.browser.name !== 'Chrome' || DetectRTC.browser.version < 50) return false;\r\n\r\n        if (typeof audioPlusTab === true) {\r\n            return true;\r\n        }\r\n\r\n        if (typeof audioPlusTab === 'undefined' && connection.session.audio && connection.session.screen && !connection.session.video) {\r\n            audioPlusTab = true;\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    function getAudioScreenConstraints(screen_constraints) {\r\n        if (DetectRTC.browser.name === 'Firefox') {\r\n            return true;\r\n        }\r\n\r\n        if (DetectRTC.browser.name !== 'Chrome') return false;\r\n\r\n        return {\r\n            mandatory: {\r\n                chromeMediaSource: screen_constraints.mandatory.chromeMediaSource,\r\n                chromeMediaSourceId: screen_constraints.mandatory.chromeMediaSourceId\r\n            }\r\n        };\r\n    }\r\n\r\n    window.iOSDefaultAudioOutputDevice = window.iOSDefaultAudioOutputDevice || 'speaker'; // earpiece or speaker\r\n\r\n    function getTracks(stream, kind) {\r\n        if (!stream || !stream.getTracks) {\r\n            return [];\r\n        }\r\n\r\n        return stream.getTracks().filter(function(t) {\r\n            return t.kind === (kind || 'audio');\r\n        });\r\n    }\r\n\r\n    function isUnifiedPlanSupportedDefault() {\r\n        var canAddTransceiver = false;\r\n\r\n        try {\r\n            if (typeof RTCRtpTransceiver === 'undefined') return false;\r\n            if (!('currentDirection' in RTCRtpTransceiver.prototype)) return false;\r\n\r\n            var tempPc = new RTCPeerConnection();\r\n\r\n            try {\r\n                tempPc.addTransceiver('audio');\r\n                canAddTransceiver = true;\r\n            } catch (e) {}\r\n\r\n            tempPc.close();\r\n        } catch (e) {\r\n            canAddTransceiver = false;\r\n        }\r\n\r\n        return canAddTransceiver && isUnifiedPlanSuppored();\r\n    }\r\n\r\n    function isUnifiedPlanSuppored() {\r\n        var isUnifiedPlanSupported = false;\r\n\r\n        try {\r\n            var pc = new RTCPeerConnection({\r\n                sdpSemantics: 'unified-plan'\r\n            });\r\n\r\n            try {\r\n                var config = pc.getConfiguration();\r\n                if (config.sdpSemantics == 'unified-plan')\r\n                    isUnifiedPlanSupported = true;\r\n                else if (config.sdpSemantics == 'plan-b')\r\n                    isUnifiedPlanSupported = false;\r\n                else\r\n                    isUnifiedPlanSupported = false;\r\n            } catch (e) {\r\n                isUnifiedPlanSupported = false;\r\n            }\r\n        } catch (e) {\r\n            isUnifiedPlanSupported = false;\r\n        }\r\n\r\n        return isUnifiedPlanSupported;\r\n    }\r\n\r\n    // ios-hacks.js\r\n\r\n    function setCordovaAPIs() {\r\n        // if (DetectRTC.osName !== 'iOS') return;\r\n        if (typeof cordova === 'undefined' || typeof cordova.plugins === 'undefined' || typeof cordova.plugins.iosrtc === 'undefined') return;\r\n\r\n        var iosrtc = cordova.plugins.iosrtc;\r\n        window.webkitRTCPeerConnection = iosrtc.RTCPeerConnection;\r\n        window.RTCSessionDescription = iosrtc.RTCSessionDescription;\r\n        window.RTCIceCandidate = iosrtc.RTCIceCandidate;\r\n        window.MediaStream = iosrtc.MediaStream;\r\n        window.MediaStreamTrack = iosrtc.MediaStreamTrack;\r\n        navigator.getUserMedia = navigator.webkitGetUserMedia = iosrtc.getUserMedia;\r\n\r\n        iosrtc.debug.enable('iosrtc*');\r\n        if (typeof iosrtc.selectAudioOutput == 'function') {\r\n            iosrtc.selectAudioOutput(window.iOSDefaultAudioOutputDevice || 'speaker'); // earpiece or speaker\r\n        }\r\n        iosrtc.registerGlobals();\r\n    }\r\n\r\n    document.addEventListener('deviceready', setCordovaAPIs, false);\r\n    setCordovaAPIs();\r\n\r\n    // RTCPeerConnection.js\r\n\r\n    var defaults = {};\r\n\r\n    function setSdpConstraints(config) {\r\n        var sdpConstraints = {\r\n            OfferToReceiveAudio: !!config.OfferToReceiveAudio,\r\n            OfferToReceiveVideo: !!config.OfferToReceiveVideo\r\n        };\r\n\r\n        return sdpConstraints;\r\n    }\r\n\r\n    var RTCPeerConnection;\r\n    if (typeof window.RTCPeerConnection !== 'undefined') {\r\n        RTCPeerConnection = window.RTCPeerConnection;\r\n    } else if (typeof mozRTCPeerConnection !== 'undefined') {\r\n        RTCPeerConnection = mozRTCPeerConnection;\r\n    } else if (typeof webkitRTCPeerConnection !== 'undefined') {\r\n        RTCPeerConnection = webkitRTCPeerConnection;\r\n    }\r\n\r\n    var RTCSessionDescription = window.RTCSessionDescription || window.mozRTCSessionDescription;\r\n    var RTCIceCandidate = window.RTCIceCandidate || window.mozRTCIceCandidate;\r\n    var MediaStreamTrack = window.MediaStreamTrack;\r\n\r\n    function PeerInitiator(config) {\r\n        if (typeof window.RTCPeerConnection !== 'undefined') {\r\n            RTCPeerConnection = window.RTCPeerConnection;\r\n        } else if (typeof mozRTCPeerConnection !== 'undefined') {\r\n            RTCPeerConnection = mozRTCPeerConnection;\r\n        } else if (typeof webkitRTCPeerConnection !== 'undefined') {\r\n            RTCPeerConnection = webkitRTCPeerConnection;\r\n        }\r\n\r\n        RTCSessionDescription = window.RTCSessionDescription || window.mozRTCSessionDescription;\r\n        RTCIceCandidate = window.RTCIceCandidate || window.mozRTCIceCandidate;\r\n        MediaStreamTrack = window.MediaStreamTrack;\r\n\r\n        if (!RTCPeerConnection) {\r\n            throw 'WebRTC 1.0 (RTCPeerConnection) API are NOT available in this browser.';\r\n        }\r\n\r\n        var connection = config.rtcMultiConnection;\r\n\r\n        this.extra = config.remoteSdp ? config.remoteSdp.extra : connection.extra;\r\n        this.userid = config.userid;\r\n        this.streams = [];\r\n        this.channels = config.channels || [];\r\n        this.connectionDescription = config.connectionDescription;\r\n\r\n        this.addStream = function(session) {\r\n            connection.addStream(session, self.userid);\r\n        };\r\n\r\n        this.removeStream = function(streamid) {\r\n            connection.removeStream(streamid, self.userid);\r\n        };\r\n\r\n        var self = this;\r\n\r\n        if (config.remoteSdp) {\r\n            this.connectionDescription = config.remoteSdp.connectionDescription;\r\n        }\r\n\r\n        var allRemoteStreams = {};\r\n\r\n        defaults.sdpConstraints = setSdpConstraints({\r\n            OfferToReceiveAudio: true,\r\n            OfferToReceiveVideo: true\r\n        });\r\n\r\n        var peer;\r\n\r\n        var renegotiatingPeer = !!config.renegotiatingPeer;\r\n        if (config.remoteSdp) {\r\n            renegotiatingPeer = !!config.remoteSdp.renegotiatingPeer;\r\n        }\r\n\r\n        var localStreams = [];\r\n        connection.attachStreams.forEach(function(stream) {\r\n            if (!!stream) {\r\n                localStreams.push(stream);\r\n            }\r\n        });\r\n\r\n        if (!renegotiatingPeer) {\r\n            var iceTransports = 'all';\r\n            if (connection.candidates.turn || connection.candidates.relay) {\r\n                if (!connection.candidates.stun && !connection.candidates.reflexive && !connection.candidates.host) {\r\n                    iceTransports = 'relay';\r\n                }\r\n            }\r\n\r\n            try {\r\n                // ref: developer.mozilla.org/en-US/docs/Web/API/RTCConfiguration\r\n                var params = {\r\n                    iceServers: connection.iceServers,\r\n                    iceTransportPolicy: connection.iceTransportPolicy || iceTransports\r\n                };\r\n\r\n                if (typeof connection.iceCandidatePoolSize !== 'undefined') {\r\n                    params.iceCandidatePoolSize = connection.iceCandidatePoolSize;\r\n                }\r\n\r\n                if (typeof connection.bundlePolicy !== 'undefined') {\r\n                    params.bundlePolicy = connection.bundlePolicy;\r\n                }\r\n\r\n                if (typeof connection.rtcpMuxPolicy !== 'undefined') {\r\n                    params.rtcpMuxPolicy = connection.rtcpMuxPolicy;\r\n                }\r\n\r\n                if (!!connection.sdpSemantics) {\r\n                    params.sdpSemantics = connection.sdpSemantics || 'unified-plan';\r\n                }\r\n\r\n                if (!connection.iceServers || !connection.iceServers.length) {\r\n                    params = null;\r\n                    connection.optionalArgument = null;\r\n                }\r\n\r\n                peer = new RTCPeerConnection(params, connection.optionalArgument);\r\n            } catch (e) {\r\n                try {\r\n                    var params = {\r\n                        iceServers: connection.iceServers\r\n                    };\r\n\r\n                    peer = new RTCPeerConnection(params);\r\n                } catch (e) {\r\n                    peer = new RTCPeerConnection();\r\n                }\r\n            }\r\n        } else {\r\n            peer = config.peerRef;\r\n        }\r\n\r\n        if (!peer.getRemoteStreams && peer.getReceivers) {\r\n            peer.getRemoteStreams = function() {\r\n                var stream = new MediaStream();\r\n                peer.getReceivers().forEach(function(receiver) {\r\n                    stream.addTrack(receiver.track);\r\n                });\r\n                return [stream];\r\n            };\r\n        }\r\n\r\n        if (!peer.getLocalStreams && peer.getSenders) {\r\n            peer.getLocalStreams = function() {\r\n                var stream = new MediaStream();\r\n                peer.getSenders().forEach(function(sender) {\r\n                    stream.addTrack(sender.track);\r\n                });\r\n                return [stream];\r\n            };\r\n        }\r\n\r\n        peer.onicecandidate = function(event) {\r\n            if (!event.candidate) {\r\n                if (!connection.trickleIce) {\r\n                    var localSdp = peer.localDescription;\r\n                    config.onLocalSdp({\r\n                        type: localSdp.type,\r\n                        sdp: localSdp.sdp,\r\n                        remotePeerSdpConstraints: config.remotePeerSdpConstraints || false,\r\n                        renegotiatingPeer: !!config.renegotiatingPeer || false,\r\n                        connectionDescription: self.connectionDescription,\r\n                        dontGetRemoteStream: !!config.dontGetRemoteStream,\r\n                        extra: connection ? connection.extra : {},\r\n                        streamsToShare: streamsToShare\r\n                    });\r\n                }\r\n                return;\r\n            }\r\n\r\n            if (!connection.trickleIce) return;\r\n            config.onLocalCandidate({\r\n                candidate: event.candidate.candidate,\r\n                sdpMid: event.candidate.sdpMid,\r\n                sdpMLineIndex: event.candidate.sdpMLineIndex\r\n            });\r\n        };\r\n\r\n        localStreams.forEach(function(localStream) {\r\n            if (config.remoteSdp && config.remoteSdp.remotePeerSdpConstraints && config.remoteSdp.remotePeerSdpConstraints.dontGetRemoteStream) {\r\n                return;\r\n            }\r\n\r\n            if (config.dontAttachLocalStream) {\r\n                return;\r\n            }\r\n\r\n            localStream = connection.beforeAddingStream(localStream, self);\r\n\r\n            if (!localStream) return;\r\n\r\n            peer.getLocalStreams().forEach(function(stream) {\r\n                if (localStream && stream.id == localStream.id) {\r\n                    localStream = null;\r\n                }\r\n            });\r\n\r\n            if (localStream && localStream.getTracks) {\r\n                localStream.getTracks().forEach(function(track) {\r\n                    try {\r\n                        // last parameter is redundant for unified-plan\r\n                        // starting from chrome version 72\r\n                        peer.addTrack(track, localStream);\r\n                    } catch (e) {}\r\n                });\r\n            }\r\n        });\r\n\r\n        peer.oniceconnectionstatechange = peer.onsignalingstatechange = function() {\r\n            var extra = self.extra;\r\n            if (connection.peers[self.userid]) {\r\n                extra = connection.peers[self.userid].extra || extra;\r\n            }\r\n\r\n            if (!peer) {\r\n                return;\r\n            }\r\n\r\n            config.onPeerStateChanged({\r\n                iceConnectionState: peer.iceConnectionState,\r\n                iceGatheringState: peer.iceGatheringState,\r\n                signalingState: peer.signalingState,\r\n                extra: extra,\r\n                userid: self.userid\r\n            });\r\n\r\n            if (peer && peer.iceConnectionState && peer.iceConnectionState.search(/closed|failed/gi) !== -1 && self.streams instanceof Array) {\r\n                self.streams.forEach(function(stream) {\r\n                    var streamEvent = connection.streamEvents[stream.id] || {\r\n                        streamid: stream.id,\r\n                        stream: stream,\r\n                        type: 'remote'\r\n                    };\r\n\r\n                    connection.onstreamended(streamEvent);\r\n                });\r\n            }\r\n        };\r\n\r\n        var sdpConstraints = {\r\n            OfferToReceiveAudio: !!localStreams.length,\r\n            OfferToReceiveVideo: !!localStreams.length\r\n        };\r\n\r\n        if (config.localPeerSdpConstraints) sdpConstraints = config.localPeerSdpConstraints;\r\n\r\n        defaults.sdpConstraints = setSdpConstraints(sdpConstraints);\r\n\r\n        var streamObject;\r\n        var dontDuplicate = {};\r\n\r\n        peer.ontrack = function(event) {\r\n            if (!event || event.type !== 'track') return;\r\n\r\n            event.stream = event.streams[event.streams.length - 1];\r\n\r\n            if (!event.stream.id) {\r\n                event.stream.id = event.track.id;\r\n            }\r\n\r\n            if (dontDuplicate[event.stream.id] && DetectRTC.browser.name !== 'Safari') {\r\n                if (event.track) {\r\n                    event.track.onended = function() { // event.track.onmute = \r\n                        peer && peer.onremovestream(event);\r\n                    };\r\n                }\r\n                return;\r\n            }\r\n\r\n            dontDuplicate[event.stream.id] = event.stream.id;\r\n\r\n            var streamsToShare = {};\r\n            if (config.remoteSdp && config.remoteSdp.streamsToShare) {\r\n                streamsToShare = config.remoteSdp.streamsToShare;\r\n            } else if (config.streamsToShare) {\r\n                streamsToShare = config.streamsToShare;\r\n            }\r\n\r\n            var streamToShare = streamsToShare[event.stream.id];\r\n            if (streamToShare) {\r\n                event.stream.isAudio = streamToShare.isAudio;\r\n                event.stream.isVideo = streamToShare.isVideo;\r\n                event.stream.isScreen = streamToShare.isScreen;\r\n            } else {\r\n                event.stream.isVideo = !!getTracks(event.stream, 'video').length;\r\n                event.stream.isAudio = !event.stream.isVideo;\r\n                event.stream.isScreen = false;\r\n            }\r\n\r\n            event.stream.streamid = event.stream.id;\r\n\r\n            allRemoteStreams[event.stream.id] = event.stream;\r\n            config.onRemoteStream(event.stream);\r\n\r\n            event.stream.getTracks().forEach(function(track) {\r\n                track.onended = function() { // track.onmute = \r\n                    peer && peer.onremovestream(event);\r\n                };\r\n            });\r\n\r\n            event.stream.onremovetrack = function() {\r\n                peer && peer.onremovestream(event);\r\n            };\r\n        };\r\n\r\n        peer.onremovestream = function(event) {\r\n            // this event doesn't works anymore\r\n            event.stream.streamid = event.stream.id;\r\n\r\n            if (allRemoteStreams[event.stream.id]) {\r\n                delete allRemoteStreams[event.stream.id];\r\n            }\r\n\r\n            config.onRemoteStreamRemoved(event.stream);\r\n        };\r\n\r\n        if (typeof peer.removeStream !== 'function') {\r\n            // removeStream backward compatibility\r\n            peer.removeStream = function(stream) {\r\n                stream.getTracks().forEach(function(track) {\r\n                    peer.removeTrack(track, stream);\r\n                });\r\n            };\r\n        }\r\n\r\n        this.addRemoteCandidate = function(remoteCandidate) {\r\n            peer.addIceCandidate(new RTCIceCandidate(remoteCandidate));\r\n        };\r\n\r\n        function oldAddRemoteSdp(remoteSdp, cb) {\r\n            cb = cb || function() {};\r\n\r\n            if (DetectRTC.browser.name !== 'Safari') {\r\n                remoteSdp.sdp = connection.processSdp(remoteSdp.sdp);\r\n            }\r\n            peer.setRemoteDescription(new RTCSessionDescription(remoteSdp), cb, function(error) {\r\n                if (!!connection.enableLogs) {\r\n                    console.error('setRemoteDescription failed', '\\n', error, '\\n', remoteSdp.sdp);\r\n                }\r\n\r\n                cb();\r\n            });\r\n        }\r\n\r\n        this.addRemoteSdp = function(remoteSdp, cb) {\r\n            cb = cb || function() {};\r\n\r\n            if (DetectRTC.browser.name !== 'Safari') {\r\n                remoteSdp.sdp = connection.processSdp(remoteSdp.sdp);\r\n            }\r\n\r\n            peer.setRemoteDescription(new RTCSessionDescription(remoteSdp)).then(cb, function(error) {\r\n                if (!!connection.enableLogs) {\r\n                    console.error('setRemoteDescription failed', '\\n', error, '\\n', remoteSdp.sdp);\r\n                }\r\n\r\n                cb();\r\n            }).catch(function(error) {\r\n                if (!!connection.enableLogs) {\r\n                    console.error('setRemoteDescription failed', '\\n', error, '\\n', remoteSdp.sdp);\r\n                }\r\n\r\n                cb();\r\n            });\r\n        };\r\n\r\n        var isOfferer = true;\r\n\r\n        if (config.remoteSdp) {\r\n            isOfferer = false;\r\n        }\r\n\r\n        this.createDataChannel = function() {\r\n            var channel = peer.createDataChannel('sctp', {});\r\n            setChannelEvents(channel);\r\n        };\r\n\r\n        if (connection.session.data === true && !renegotiatingPeer) {\r\n            if (!isOfferer) {\r\n                peer.ondatachannel = function(event) {\r\n                    var channel = event.channel;\r\n                    setChannelEvents(channel);\r\n                };\r\n            } else {\r\n                this.createDataChannel();\r\n            }\r\n        }\r\n\r\n        this.enableDisableVideoEncoding = function(enable) {\r\n            var rtcp;\r\n            peer.getSenders().forEach(function(sender) {\r\n                if (!rtcp && sender.track.kind === 'video') {\r\n                    rtcp = sender;\r\n                }\r\n            });\r\n\r\n            if (!rtcp || !rtcp.getParameters) return;\r\n\r\n            var parameters = rtcp.getParameters();\r\n            parameters.encodings[1] && (parameters.encodings[1].active = !!enable);\r\n            parameters.encodings[2] && (parameters.encodings[2].active = !!enable);\r\n            rtcp.setParameters(parameters);\r\n        };\r\n\r\n        if (config.remoteSdp) {\r\n            if (config.remoteSdp.remotePeerSdpConstraints) {\r\n                sdpConstraints = config.remoteSdp.remotePeerSdpConstraints;\r\n            }\r\n            defaults.sdpConstraints = setSdpConstraints(sdpConstraints);\r\n            this.addRemoteSdp(config.remoteSdp, function() {\r\n                createOfferOrAnswer('createAnswer');\r\n            });\r\n        }\r\n\r\n        function setChannelEvents(channel) {\r\n            // force ArrayBuffer in Firefox; which uses \"Blob\" by default.\r\n            channel.binaryType = 'arraybuffer';\r\n\r\n            channel.onmessage = function(event) {\r\n                config.onDataChannelMessage(event.data);\r\n            };\r\n\r\n            channel.onopen = function() {\r\n                config.onDataChannelOpened(channel);\r\n            };\r\n\r\n            channel.onerror = function(error) {\r\n                config.onDataChannelError(error);\r\n            };\r\n\r\n            channel.onclose = function(event) {\r\n                config.onDataChannelClosed(event);\r\n            };\r\n\r\n            channel.internalSend = channel.send;\r\n            channel.send = function(data) {\r\n                if (channel.readyState !== 'open') {\r\n                    return;\r\n                }\r\n\r\n                channel.internalSend(data);\r\n            };\r\n\r\n            peer.channel = channel;\r\n        }\r\n\r\n        if (connection.session.audio == 'two-way' || connection.session.video == 'two-way' || connection.session.screen == 'two-way') {\r\n            defaults.sdpConstraints = setSdpConstraints({\r\n                OfferToReceiveAudio: connection.session.audio == 'two-way' || (config.remoteSdp && config.remoteSdp.remotePeerSdpConstraints && config.remoteSdp.remotePeerSdpConstraints.OfferToReceiveAudio),\r\n                OfferToReceiveVideo: connection.session.video == 'two-way' || connection.session.screen == 'two-way' || (config.remoteSdp && config.remoteSdp.remotePeerSdpConstraints && config.remoteSdp.remotePeerSdpConstraints.OfferToReceiveAudio)\r\n            });\r\n        }\r\n\r\n        var streamsToShare = {};\r\n        peer.getLocalStreams().forEach(function(stream) {\r\n            streamsToShare[stream.streamid] = {\r\n                isAudio: !!stream.isAudio,\r\n                isVideo: !!stream.isVideo,\r\n                isScreen: !!stream.isScreen\r\n            };\r\n        });\r\n\r\n        function oldCreateOfferOrAnswer(_method) {\r\n            peer[_method](function(localSdp) {\r\n                if (DetectRTC.browser.name !== 'Safari') {\r\n                    localSdp.sdp = connection.processSdp(localSdp.sdp);\r\n                }\r\n                peer.setLocalDescription(localSdp, function() {\r\n                    if (!connection.trickleIce) return;\r\n\r\n                    config.onLocalSdp({\r\n                        type: localSdp.type,\r\n                        sdp: localSdp.sdp,\r\n                        remotePeerSdpConstraints: config.remotePeerSdpConstraints || false,\r\n                        renegotiatingPeer: !!config.renegotiatingPeer || false,\r\n                        connectionDescription: self.connectionDescription,\r\n                        dontGetRemoteStream: !!config.dontGetRemoteStream,\r\n                        extra: connection ? connection.extra : {},\r\n                        streamsToShare: streamsToShare\r\n                    });\r\n\r\n                    connection.onSettingLocalDescription(self);\r\n                }, function(error) {\r\n                    if (!!connection.enableLogs) {\r\n                        console.error('setLocalDescription-error', error);\r\n                    }\r\n                });\r\n            }, function(error) {\r\n                if (!!connection.enableLogs) {\r\n                    console.error('sdp-' + _method + '-error', error);\r\n                }\r\n            }, defaults.sdpConstraints);\r\n        }\r\n\r\n        function createOfferOrAnswer(_method) {\r\n            peer[_method](defaults.sdpConstraints).then(function(localSdp) {\r\n                if (DetectRTC.browser.name !== 'Safari') {\r\n                    localSdp.sdp = connection.processSdp(localSdp.sdp);\r\n                }\r\n                peer.setLocalDescription(localSdp).then(function() {\r\n                    if (!connection.trickleIce) return;\r\n\r\n                    config.onLocalSdp({\r\n                        type: localSdp.type,\r\n                        sdp: localSdp.sdp,\r\n                        remotePeerSdpConstraints: config.remotePeerSdpConstraints || false,\r\n                        renegotiatingPeer: !!config.renegotiatingPeer || false,\r\n                        connectionDescription: self.connectionDescription,\r\n                        dontGetRemoteStream: !!config.dontGetRemoteStream,\r\n                        extra: connection ? connection.extra : {},\r\n                        streamsToShare: streamsToShare\r\n                    });\r\n\r\n                    connection.onSettingLocalDescription(self);\r\n                }, function(error) {\r\n                    if (!connection.enableLogs) return;\r\n                    console.error('setLocalDescription error', error);\r\n                });\r\n            }, function(error) {\r\n                if (!!connection.enableLogs) {\r\n                    console.error('sdp-error', error);\r\n                }\r\n            });\r\n        }\r\n\r\n        if (isOfferer) {\r\n            createOfferOrAnswer('createOffer');\r\n        }\r\n\r\n        peer.nativeClose = peer.close;\r\n        peer.close = function() {\r\n            if (!peer) {\r\n                return;\r\n            }\r\n\r\n            try {\r\n                if (peer.nativeClose !== peer.close) {\r\n                    peer.nativeClose();\r\n                }\r\n            } catch (e) {}\r\n\r\n            peer = null;\r\n            self.peer = null;\r\n        };\r\n\r\n        this.peer = peer;\r\n    }\r\n\r\n    // CodecsHandler.js\r\n\r\n    var CodecsHandler = (function() {\r\n        function preferCodec(sdp, codecName) {\r\n            var info = splitLines(sdp);\r\n\r\n            if (!info.videoCodecNumbers) {\r\n                return sdp;\r\n            }\r\n\r\n            if (codecName === 'vp8' && info.vp8LineNumber === info.videoCodecNumbers[0]) {\r\n                return sdp;\r\n            }\r\n\r\n            if (codecName === 'vp9' && info.vp9LineNumber === info.videoCodecNumbers[0]) {\r\n                return sdp;\r\n            }\r\n\r\n            if (codecName === 'h264' && info.h264LineNumber === info.videoCodecNumbers[0]) {\r\n                return sdp;\r\n            }\r\n\r\n            sdp = preferCodecHelper(sdp, codecName, info);\r\n\r\n            return sdp;\r\n        }\r\n\r\n        function preferCodecHelper(sdp, codec, info, ignore) {\r\n            var preferCodecNumber = '';\r\n\r\n            if (codec === 'vp8') {\r\n                if (!info.vp8LineNumber) {\r\n                    return sdp;\r\n                }\r\n                preferCodecNumber = info.vp8LineNumber;\r\n            }\r\n\r\n            if (codec === 'vp9') {\r\n                if (!info.vp9LineNumber) {\r\n                    return sdp;\r\n                }\r\n                preferCodecNumber = info.vp9LineNumber;\r\n            }\r\n\r\n            if (codec === 'h264') {\r\n                if (!info.h264LineNumber) {\r\n                    return sdp;\r\n                }\r\n\r\n                preferCodecNumber = info.h264LineNumber;\r\n            }\r\n\r\n            var newLine = info.videoCodecNumbersOriginal.split('SAVPF')[0] + 'SAVPF ';\r\n\r\n            var newOrder = [preferCodecNumber];\r\n\r\n            if (ignore) {\r\n                newOrder = [];\r\n            }\r\n\r\n            info.videoCodecNumbers.forEach(function(codecNumber) {\r\n                if (codecNumber === preferCodecNumber) return;\r\n                newOrder.push(codecNumber);\r\n            });\r\n\r\n            newLine += newOrder.join(' ');\r\n\r\n            sdp = sdp.replace(info.videoCodecNumbersOriginal, newLine);\r\n            return sdp;\r\n        }\r\n\r\n        function splitLines(sdp) {\r\n            var info = {};\r\n            sdp.split('\\n').forEach(function(line) {\r\n                if (line.indexOf('m=video') === 0) {\r\n                    info.videoCodecNumbers = [];\r\n                    line.split('SAVPF')[1].split(' ').forEach(function(codecNumber) {\r\n                        codecNumber = codecNumber.trim();\r\n                        if (!codecNumber || !codecNumber.length) return;\r\n                        info.videoCodecNumbers.push(codecNumber);\r\n                        info.videoCodecNumbersOriginal = line;\r\n                    });\r\n                }\r\n\r\n                if (line.indexOf('VP8/90000') !== -1 && !info.vp8LineNumber) {\r\n                    info.vp8LineNumber = line.replace('a=rtpmap:', '').split(' ')[0];\r\n                }\r\n\r\n                if (line.indexOf('VP9/90000') !== -1 && !info.vp9LineNumber) {\r\n                    info.vp9LineNumber = line.replace('a=rtpmap:', '').split(' ')[0];\r\n                }\r\n\r\n                if (line.indexOf('H264/90000') !== -1 && !info.h264LineNumber) {\r\n                    info.h264LineNumber = line.replace('a=rtpmap:', '').split(' ')[0];\r\n                }\r\n            });\r\n\r\n            return info;\r\n        }\r\n\r\n        function removeVPX(sdp) {\r\n            var info = splitLines(sdp);\r\n\r\n            // last parameter below means: ignore these codecs\r\n            sdp = preferCodecHelper(sdp, 'vp9', info, true);\r\n            sdp = preferCodecHelper(sdp, 'vp8', info, true);\r\n\r\n            return sdp;\r\n        }\r\n\r\n        function disableNACK(sdp) {\r\n            if (!sdp || typeof sdp !== 'string') {\r\n                throw 'Invalid arguments.';\r\n            }\r\n\r\n            sdp = sdp.replace('a=rtcp-fb:126 nack\\r\\n', '');\r\n            sdp = sdp.replace('a=rtcp-fb:126 nack pli\\r\\n', 'a=rtcp-fb:126 pli\\r\\n');\r\n            sdp = sdp.replace('a=rtcp-fb:97 nack\\r\\n', '');\r\n            sdp = sdp.replace('a=rtcp-fb:97 nack pli\\r\\n', 'a=rtcp-fb:97 pli\\r\\n');\r\n\r\n            return sdp;\r\n        }\r\n\r\n        function prioritize(codecMimeType, peer) {\r\n            if (!peer || !peer.getSenders || !peer.getSenders().length) {\r\n                return;\r\n            }\r\n\r\n            if (!codecMimeType || typeof codecMimeType !== 'string') {\r\n                throw 'Invalid arguments.';\r\n            }\r\n\r\n            peer.getSenders().forEach(function(sender) {\r\n                var params = sender.getParameters();\r\n                for (var i = 0; i < params.codecs.length; i++) {\r\n                    if (params.codecs[i].mimeType == codecMimeType) {\r\n                        params.codecs.unshift(params.codecs.splice(i, 1));\r\n                        break;\r\n                    }\r\n                }\r\n                sender.setParameters(params);\r\n            });\r\n        }\r\n\r\n        function removeNonG722(sdp) {\r\n            return sdp.replace(/m=audio ([0-9]+) RTP\\/SAVPF ([0-9 ]*)/g, 'm=audio $1 RTP\\/SAVPF 9');\r\n        }\r\n\r\n        function setBAS(sdp, bandwidth, isScreen) {\r\n            if (!bandwidth) {\r\n                return sdp;\r\n            }\r\n\r\n            if (typeof isFirefox !== 'undefined' && isFirefox) {\r\n                return sdp;\r\n            }\r\n\r\n            if (isScreen) {\r\n                if (!bandwidth.screen) {\r\n                    console.warn('It seems that you are not using bandwidth for screen. Screen sharing is expected to fail.');\r\n                } else if (bandwidth.screen < 300) {\r\n                    console.warn('It seems that you are using wrong bandwidth value for screen. Screen sharing is expected to fail.');\r\n                }\r\n            }\r\n\r\n            // if screen; must use at least 300kbs\r\n            if (bandwidth.screen && isScreen) {\r\n                sdp = sdp.replace(/b=AS([^\\r\\n]+\\r\\n)/g, '');\r\n                sdp = sdp.replace(/a=mid:video\\r\\n/g, 'a=mid:video\\r\\nb=AS:' + bandwidth.screen + '\\r\\n');\r\n            }\r\n\r\n            // remove existing bandwidth lines\r\n            if (bandwidth.audio || bandwidth.video) {\r\n                sdp = sdp.replace(/b=AS([^\\r\\n]+\\r\\n)/g, '');\r\n            }\r\n\r\n            if (bandwidth.audio) {\r\n                sdp = sdp.replace(/a=mid:audio\\r\\n/g, 'a=mid:audio\\r\\nb=AS:' + bandwidth.audio + '\\r\\n');\r\n            }\r\n\r\n            if (bandwidth.screen) {\r\n                sdp = sdp.replace(/a=mid:video\\r\\n/g, 'a=mid:video\\r\\nb=AS:' + bandwidth.screen + '\\r\\n');\r\n            } else if (bandwidth.video) {\r\n                sdp = sdp.replace(/a=mid:video\\r\\n/g, 'a=mid:video\\r\\nb=AS:' + bandwidth.video + '\\r\\n');\r\n            }\r\n\r\n            return sdp;\r\n        }\r\n\r\n        // Find the line in sdpLines that starts with |prefix|, and, if specified,\r\n        // contains |substr| (case-insensitive search).\r\n        function findLine(sdpLines, prefix, substr) {\r\n            return findLineInRange(sdpLines, 0, -1, prefix, substr);\r\n        }\r\n\r\n        // Find the line in sdpLines[startLine...endLine - 1] that starts with |prefix|\r\n        // and, if specified, contains |substr| (case-insensitive search).\r\n        function findLineInRange(sdpLines, startLine, endLine, prefix, substr) {\r\n            var realEndLine = endLine !== -1 ? endLine : sdpLines.length;\r\n            for (var i = startLine; i < realEndLine; ++i) {\r\n                if (sdpLines[i].indexOf(prefix) === 0) {\r\n                    if (!substr ||\r\n                        sdpLines[i].toLowerCase().indexOf(substr.toLowerCase()) !== -1) {\r\n                        return i;\r\n                    }\r\n                }\r\n            }\r\n            return null;\r\n        }\r\n\r\n        // Gets the codec payload type from an a=rtpmap:X line.\r\n        function getCodecPayloadType(sdpLine) {\r\n            var pattern = new RegExp('a=rtpmap:(\\\\d+) \\\\w+\\\\/\\\\d+');\r\n            var result = sdpLine.match(pattern);\r\n            return (result && result.length === 2) ? result[1] : null;\r\n        }\r\n\r\n        function setVideoBitrates(sdp, params) {\r\n            params = params || {};\r\n            var xgoogle_min_bitrate = params.min;\r\n            var xgoogle_max_bitrate = params.max;\r\n\r\n            var sdpLines = sdp.split('\\r\\n');\r\n\r\n            // VP8\r\n            var vp8Index = findLine(sdpLines, 'a=rtpmap', 'VP8/90000');\r\n            var vp8Payload;\r\n            if (vp8Index) {\r\n                vp8Payload = getCodecPayloadType(sdpLines[vp8Index]);\r\n            }\r\n\r\n            if (!vp8Payload) {\r\n                return sdp;\r\n            }\r\n\r\n            var rtxIndex = findLine(sdpLines, 'a=rtpmap', 'rtx/90000');\r\n            var rtxPayload;\r\n            if (rtxIndex) {\r\n                rtxPayload = getCodecPayloadType(sdpLines[rtxIndex]);\r\n            }\r\n\r\n            if (!rtxIndex) {\r\n                return sdp;\r\n            }\r\n\r\n            var rtxFmtpLineIndex = findLine(sdpLines, 'a=fmtp:' + rtxPayload.toString());\r\n            if (rtxFmtpLineIndex !== null) {\r\n                var appendrtxNext = '\\r\\n';\r\n                appendrtxNext += 'a=fmtp:' + vp8Payload + ' x-google-min-bitrate=' + (xgoogle_min_bitrate || '228') + '; x-google-max-bitrate=' + (xgoogle_max_bitrate || '228');\r\n                sdpLines[rtxFmtpLineIndex] = sdpLines[rtxFmtpLineIndex].concat(appendrtxNext);\r\n                sdp = sdpLines.join('\\r\\n');\r\n            }\r\n\r\n            return sdp;\r\n        }\r\n\r\n        function setOpusAttributes(sdp, params) {\r\n            params = params || {};\r\n\r\n            var sdpLines = sdp.split('\\r\\n');\r\n\r\n            // Opus\r\n            var opusIndex = findLine(sdpLines, 'a=rtpmap', 'opus/48000');\r\n            var opusPayload;\r\n            if (opusIndex) {\r\n                opusPayload = getCodecPayloadType(sdpLines[opusIndex]);\r\n            }\r\n\r\n            if (!opusPayload) {\r\n                return sdp;\r\n            }\r\n\r\n            var opusFmtpLineIndex = findLine(sdpLines, 'a=fmtp:' + opusPayload.toString());\r\n            if (opusFmtpLineIndex === null) {\r\n                return sdp;\r\n            }\r\n\r\n            var appendOpusNext = '';\r\n            appendOpusNext += '; stereo=' + (typeof params.stereo != 'undefined' ? params.stereo : '1');\r\n            appendOpusNext += '; sprop-stereo=' + (typeof params['sprop-stereo'] != 'undefined' ? params['sprop-stereo'] : '1');\r\n\r\n            if (typeof params.maxaveragebitrate != 'undefined') {\r\n                appendOpusNext += '; maxaveragebitrate=' + (params.maxaveragebitrate || 128 * 1024 * 8);\r\n            }\r\n\r\n            if (typeof params.maxplaybackrate != 'undefined') {\r\n                appendOpusNext += '; maxplaybackrate=' + (params.maxplaybackrate || 128 * 1024 * 8);\r\n            }\r\n\r\n            if (typeof params.cbr != 'undefined') {\r\n                appendOpusNext += '; cbr=' + (typeof params.cbr != 'undefined' ? params.cbr : '1');\r\n            }\r\n\r\n            if (typeof params.useinbandfec != 'undefined') {\r\n                appendOpusNext += '; useinbandfec=' + params.useinbandfec;\r\n            }\r\n\r\n            if (typeof params.usedtx != 'undefined') {\r\n                appendOpusNext += '; usedtx=' + params.usedtx;\r\n            }\r\n\r\n            if (typeof params.maxptime != 'undefined') {\r\n                appendOpusNext += '\\r\\na=maxptime:' + params.maxptime;\r\n            }\r\n\r\n            sdpLines[opusFmtpLineIndex] = sdpLines[opusFmtpLineIndex].concat(appendOpusNext);\r\n\r\n            sdp = sdpLines.join('\\r\\n');\r\n            return sdp;\r\n        }\r\n\r\n        // forceStereoAudio => via webrtcexample.com\r\n        // requires getUserMedia => echoCancellation:false\r\n        function forceStereoAudio(sdp) {\r\n            var sdpLines = sdp.split('\\r\\n');\r\n            var fmtpLineIndex = null;\r\n            for (var i = 0; i < sdpLines.length; i++) {\r\n                if (sdpLines[i].search('opus/48000') !== -1) {\r\n                    var opusPayload = extractSdp(sdpLines[i], /:(\\d+) opus\\/48000/i);\r\n                    break;\r\n                }\r\n            }\r\n            for (var i = 0; i < sdpLines.length; i++) {\r\n                if (sdpLines[i].search('a=fmtp') !== -1) {\r\n                    var payload = extractSdp(sdpLines[i], /a=fmtp:(\\d+)/);\r\n                    if (payload === opusPayload) {\r\n                        fmtpLineIndex = i;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            if (fmtpLineIndex === null) return sdp;\r\n            sdpLines[fmtpLineIndex] = sdpLines[fmtpLineIndex].concat('; stereo=1; sprop-stereo=1');\r\n            sdp = sdpLines.join('\\r\\n');\r\n            return sdp;\r\n        }\r\n\r\n        return {\r\n            removeVPX: removeVPX,\r\n            disableNACK: disableNACK,\r\n            prioritize: prioritize,\r\n            removeNonG722: removeNonG722,\r\n            setApplicationSpecificBandwidth: function(sdp, bandwidth, isScreen) {\r\n                return setBAS(sdp, bandwidth, isScreen);\r\n            },\r\n            setVideoBitrates: function(sdp, params) {\r\n                return setVideoBitrates(sdp, params);\r\n            },\r\n            setOpusAttributes: function(sdp, params) {\r\n                return setOpusAttributes(sdp, params);\r\n            },\r\n            preferVP9: function(sdp) {\r\n                return preferCodec(sdp, 'vp9');\r\n            },\r\n            preferCodec: preferCodec,\r\n            forceStereoAudio: forceStereoAudio\r\n        };\r\n    })();\r\n\r\n    // backward compatibility\r\n    window.BandwidthHandler = CodecsHandler;\r\n\r\n    // OnIceCandidateHandler.js\r\n\r\n    var OnIceCandidateHandler = (function() {\r\n        function processCandidates(connection, icePair) {\r\n            var candidate = icePair.candidate;\r\n\r\n            var iceRestrictions = connection.candidates;\r\n            var stun = iceRestrictions.stun;\r\n            var turn = iceRestrictions.turn;\r\n\r\n            if (!isNull(iceRestrictions.reflexive)) {\r\n                stun = iceRestrictions.reflexive;\r\n            }\r\n\r\n            if (!isNull(iceRestrictions.relay)) {\r\n                turn = iceRestrictions.relay;\r\n            }\r\n\r\n            if (!iceRestrictions.host && !!candidate.match(/typ host/g)) {\r\n                return;\r\n            }\r\n\r\n            if (!turn && !!candidate.match(/typ relay/g)) {\r\n                return;\r\n            }\r\n\r\n            if (!stun && !!candidate.match(/typ srflx/g)) {\r\n                return;\r\n            }\r\n\r\n            var protocol = connection.iceProtocols;\r\n\r\n            if (!protocol.udp && !!candidate.match(/ udp /g)) {\r\n                return;\r\n            }\r\n\r\n            if (!protocol.tcp && !!candidate.match(/ tcp /g)) {\r\n                return;\r\n            }\r\n\r\n            if (connection.enableLogs) {\r\n                console.debug('Your candidate pairs:', candidate);\r\n            }\r\n\r\n            return {\r\n                candidate: candidate,\r\n                sdpMid: icePair.sdpMid,\r\n                sdpMLineIndex: icePair.sdpMLineIndex\r\n            };\r\n        }\r\n\r\n        return {\r\n            processCandidates: processCandidates\r\n        };\r\n    })();\r\n\r\n    // IceServersHandler.js\r\n\r\n    var IceServersHandler = (function() {\r\n        function getIceServers(connection) {\r\n            // resiprocate: 3344+4433\r\n            // pions: 7575\r\n            var iceServers = [{\r\n                'urls': [\r\n                    'stun:stun.l.google.com:19302',\r\n                    'stun:stun1.l.google.com:19302',\r\n                    'stun:stun2.l.google.com:19302',\r\n                    'stun:stun.l.google.com:19302?transport=udp',\r\n                ]\r\n            }];\r\n\r\n            return iceServers;\r\n        }\r\n\r\n        return {\r\n            getIceServers: getIceServers\r\n        };\r\n    })();\r\n\r\n    // getUserMediaHandler.js\r\n\r\n    function setStreamType(constraints, stream) {\r\n        if (constraints.mandatory && constraints.mandatory.chromeMediaSource) {\r\n            stream.isScreen = true;\r\n        } else if (constraints.mozMediaSource || constraints.mediaSource) {\r\n            stream.isScreen = true;\r\n        } else if (constraints.video) {\r\n            stream.isVideo = true;\r\n        } else if (constraints.audio) {\r\n            stream.isAudio = true;\r\n        }\r\n    }\r\n\r\n    // allow users to manage this object (to support re-capturing of screen/etc.)\r\n    window.currentUserMediaRequest = {\r\n        streams: [],\r\n        mutex: false,\r\n        queueRequests: [],\r\n        remove: function(idInstance) {\r\n            this.mutex = false;\r\n\r\n            var stream = this.streams[idInstance];\r\n            if (!stream) {\r\n                return;\r\n            }\r\n\r\n            stream = stream.stream;\r\n\r\n            var options = stream.currentUserMediaRequestOptions;\r\n\r\n            if (this.queueRequests.indexOf(options)) {\r\n                delete this.queueRequests[this.queueRequests.indexOf(options)];\r\n                this.queueRequests = removeNullEntries(this.queueRequests);\r\n            }\r\n\r\n            this.streams[idInstance].stream = null;\r\n            delete this.streams[idInstance];\r\n        }\r\n    };\r\n\r\n    function getUserMediaHandler(options) {\r\n        if (currentUserMediaRequest.mutex === true) {\r\n            currentUserMediaRequest.queueRequests.push(options);\r\n            return;\r\n        }\r\n        currentUserMediaRequest.mutex = true;\r\n\r\n        // easy way to match\r\n        var idInstance = JSON.stringify(options.localMediaConstraints);\r\n\r\n        function streaming(stream, returnBack) {\r\n            setStreamType(options.localMediaConstraints, stream);\r\n\r\n            var streamEndedEvent = 'ended';\r\n\r\n            if ('oninactive' in stream) {\r\n                streamEndedEvent = 'inactive';\r\n            }\r\n            stream.addEventListener(streamEndedEvent, function() {\r\n                delete currentUserMediaRequest.streams[idInstance];\r\n\r\n                currentUserMediaRequest.mutex = false;\r\n                if (currentUserMediaRequest.queueRequests.indexOf(options)) {\r\n                    delete currentUserMediaRequest.queueRequests[currentUserMediaRequest.queueRequests.indexOf(options)];\r\n                    currentUserMediaRequest.queueRequests = removeNullEntries(currentUserMediaRequest.queueRequests);\r\n                }\r\n            }, false);\r\n\r\n            currentUserMediaRequest.streams[idInstance] = {\r\n                stream: stream\r\n            };\r\n            currentUserMediaRequest.mutex = false;\r\n\r\n            if (currentUserMediaRequest.queueRequests.length) {\r\n                getUserMediaHandler(currentUserMediaRequest.queueRequests.shift());\r\n            }\r\n\r\n            // callback\r\n            options.onGettingLocalMedia(stream, returnBack);\r\n        }\r\n\r\n        if (currentUserMediaRequest.streams[idInstance]) {\r\n            streaming(currentUserMediaRequest.streams[idInstance].stream, true);\r\n        } else {\r\n            var isBlackBerry = !!(/BB10|BlackBerry/i.test(navigator.userAgent || ''));\r\n            if (isBlackBerry || typeof navigator.mediaDevices === 'undefined' || typeof navigator.mediaDevices.getUserMedia !== 'function') {\r\n                navigator.getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia;\r\n                navigator.getUserMedia(options.localMediaConstraints, function(stream) {\r\n                    stream.streamid = stream.streamid || stream.id || getRandomString();\r\n                    stream.idInstance = idInstance;\r\n                    streaming(stream);\r\n                }, function(error) {\r\n                    options.onLocalMediaError(error, options.localMediaConstraints);\r\n                });\r\n                return;\r\n            }\r\n\r\n            if (typeof navigator.mediaDevices === 'undefined') {\r\n                navigator.getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia;\r\n                var getUserMediaSuccess = function() {};\r\n                var getUserMediaFailure = function() {};\r\n\r\n                var getUserMediaStream, getUserMediaError;\r\n                navigator.mediaDevices = {\r\n                    getUserMedia: function(hints) {\r\n                        navigator.getUserMedia(hints, function(getUserMediaSuccess) {\r\n                            getUserMediaSuccess(stream);\r\n                            getUserMediaStream = stream;\r\n                        }, function(error) {\r\n                            getUserMediaFailure(error);\r\n                            getUserMediaError = error;\r\n                        });\r\n\r\n                        return {\r\n                            then: function(successCB) {\r\n                                if (getUserMediaStream) {\r\n                                    successCB(getUserMediaStream);\r\n                                    return;\r\n                                }\r\n\r\n                                getUserMediaSuccess = successCB;\r\n\r\n                                return {\r\n                                    then: function(failureCB) {\r\n                                        if (getUserMediaError) {\r\n                                            failureCB(getUserMediaError);\r\n                                            return;\r\n                                        }\r\n\r\n                                        getUserMediaFailure = failureCB;\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                };\r\n            }\r\n\r\n            if (options.localMediaConstraints.isScreen === true) {\r\n                if (navigator.mediaDevices.getDisplayMedia) {\r\n                    navigator.mediaDevices.getDisplayMedia(options.localMediaConstraints).then(function(stream) {\r\n                        stream.streamid = stream.streamid || stream.id || getRandomString();\r\n                        stream.idInstance = idInstance;\r\n\r\n                        streaming(stream);\r\n                    }).catch(function(error) {\r\n                        options.onLocalMediaError(error, options.localMediaConstraints);\r\n                    });\r\n                } else if (navigator.getDisplayMedia) {\r\n                    navigator.getDisplayMedia(options.localMediaConstraints).then(function(stream) {\r\n                        stream.streamid = stream.streamid || stream.id || getRandomString();\r\n                        stream.idInstance = idInstance;\r\n\r\n                        streaming(stream);\r\n                    }).catch(function(error) {\r\n                        options.onLocalMediaError(error, options.localMediaConstraints);\r\n                    });\r\n                } else {\r\n                    throw new Error('getDisplayMedia API is not availabe in this browser.');\r\n                }\r\n                return;\r\n            }\r\n\r\n            navigator.mediaDevices.getUserMedia(options.localMediaConstraints).then(function(stream) {\r\n                stream.streamid = stream.streamid || stream.id || getRandomString();\r\n                stream.idInstance = idInstance;\r\n\r\n                streaming(stream);\r\n            }).catch(function(error) {\r\n                options.onLocalMediaError(error, options.localMediaConstraints);\r\n            });\r\n        }\r\n    }\r\n\r\n    // StreamsHandler.js\r\n\r\n    var StreamsHandler = (function() {\r\n        function handleType(type) {\r\n            if (!type) {\r\n                return;\r\n            }\r\n\r\n            if (typeof type === 'string' || typeof type === 'undefined') {\r\n                return type;\r\n            }\r\n\r\n            if (type.audio && type.video) {\r\n                return null;\r\n            }\r\n\r\n            if (type.audio) {\r\n                return 'audio';\r\n            }\r\n\r\n            if (type.video) {\r\n                return 'video';\r\n            }\r\n\r\n            return;\r\n        }\r\n\r\n        function setHandlers(stream, syncAction, connection) {\r\n            if (!stream || !stream.addEventListener) return;\r\n\r\n            if (typeof syncAction == 'undefined' || syncAction == true) {\r\n                var streamEndedEvent = 'ended';\r\n\r\n                if ('oninactive' in stream) {\r\n                    streamEndedEvent = 'inactive';\r\n                }\r\n\r\n                stream.addEventListener(streamEndedEvent, function() {\r\n                    StreamsHandler.onSyncNeeded(this.streamid, streamEndedEvent);\r\n                }, false);\r\n            }\r\n\r\n            stream.mute = function(type, isSyncAction) {\r\n                type = handleType(type);\r\n\r\n                if (typeof isSyncAction !== 'undefined') {\r\n                    syncAction = isSyncAction;\r\n                }\r\n\r\n                if (typeof type == 'undefined' || type == 'audio') {\r\n                    getTracks(stream, 'audio').forEach(function(track) {\r\n                        track.enabled = false;\r\n                        connection.streamEvents[stream.streamid].isAudioMuted = true;\r\n                    });\r\n                }\r\n\r\n                if (typeof type == 'undefined' || type == 'video') {\r\n                    getTracks(stream, 'video').forEach(function(track) {\r\n                        track.enabled = false;\r\n                    });\r\n                }\r\n\r\n                if (typeof syncAction == 'undefined' || syncAction == true) {\r\n                    StreamsHandler.onSyncNeeded(stream.streamid, 'mute', type);\r\n                }\r\n\r\n                connection.streamEvents[stream.streamid].muteType = type || 'both';\r\n\r\n                fireEvent(stream, 'mute', type);\r\n            };\r\n\r\n            stream.unmute = function(type, isSyncAction) {\r\n                type = handleType(type);\r\n\r\n                if (typeof isSyncAction !== 'undefined') {\r\n                    syncAction = isSyncAction;\r\n                }\r\n\r\n                graduallyIncreaseVolume();\r\n\r\n                if (typeof type == 'undefined' || type == 'audio') {\r\n                    getTracks(stream, 'audio').forEach(function(track) {\r\n                        track.enabled = true;\r\n                        connection.streamEvents[stream.streamid].isAudioMuted = false;\r\n                    });\r\n                }\r\n\r\n                if (typeof type == 'undefined' || type == 'video') {\r\n                    getTracks(stream, 'video').forEach(function(track) {\r\n                        track.enabled = true;\r\n                    });\r\n\r\n                    // make sure that video unmute doesn't affects audio\r\n                    if (typeof type !== 'undefined' && type == 'video' && connection.streamEvents[stream.streamid].isAudioMuted) {\r\n                        (function looper(times) {\r\n                            if (!times) {\r\n                                times = 0;\r\n                            }\r\n\r\n                            times++;\r\n\r\n                            // check until five-seconds\r\n                            if (times < 100 && connection.streamEvents[stream.streamid].isAudioMuted) {\r\n                                stream.mute('audio');\r\n\r\n                                setTimeout(function() {\r\n                                    looper(times);\r\n                                }, 50);\r\n                            }\r\n                        })();\r\n                    }\r\n                }\r\n\r\n                if (typeof syncAction == 'undefined' || syncAction == true) {\r\n                    StreamsHandler.onSyncNeeded(stream.streamid, 'unmute', type);\r\n                }\r\n\r\n                connection.streamEvents[stream.streamid].unmuteType = type || 'both';\r\n\r\n                fireEvent(stream, 'unmute', type);\r\n            };\r\n\r\n            function graduallyIncreaseVolume() {\r\n                if (!connection.streamEvents[stream.streamid].mediaElement) {\r\n                    return;\r\n                }\r\n\r\n                var mediaElement = connection.streamEvents[stream.streamid].mediaElement;\r\n                mediaElement.volume = 0;\r\n                afterEach(200, 5, function() {\r\n                    try {\r\n                        mediaElement.volume += .20;\r\n                    } catch (e) {\r\n                        mediaElement.volume = 1;\r\n                    }\r\n                });\r\n            }\r\n        }\r\n\r\n        function afterEach(setTimeoutInteval, numberOfTimes, callback, startedTimes) {\r\n            startedTimes = (startedTimes || 0) + 1;\r\n            if (startedTimes >= numberOfTimes) return;\r\n\r\n            setTimeout(function() {\r\n                callback();\r\n                afterEach(setTimeoutInteval, numberOfTimes, callback, startedTimes);\r\n            }, setTimeoutInteval);\r\n        }\r\n\r\n        return {\r\n            setHandlers: setHandlers,\r\n            onSyncNeeded: function(streamid, action, type) {}\r\n        };\r\n    })();\r\n\r\n    // TextReceiver.js & TextSender.js\r\n\r\n    function TextReceiver(connection) {\r\n        var content = {};\r\n\r\n        function receive(data, userid, extra) {\r\n            // uuid is used to uniquely identify sending instance\r\n            var uuid = data.uuid;\r\n            if (!content[uuid]) {\r\n                content[uuid] = [];\r\n            }\r\n\r\n            content[uuid].push(data.message);\r\n\r\n            if (data.last) {\r\n                var message = content[uuid].join('');\r\n                if (data.isobject) {\r\n                    message = JSON.parse(message);\r\n                }\r\n\r\n                // latency detection\r\n                var receivingTime = new Date().getTime();\r\n                var latency = receivingTime - data.sendingTime;\r\n\r\n                var e = {\r\n                    data: message,\r\n                    userid: userid,\r\n                    extra: extra,\r\n                    latency: latency\r\n                };\r\n\r\n                if (connection.autoTranslateText) {\r\n                    e.original = e.data;\r\n                    connection.Translator.TranslateText(e.data, function(translatedText) {\r\n                        e.data = translatedText;\r\n                        connection.onmessage(e);\r\n                    });\r\n                } else {\r\n                    connection.onmessage(e);\r\n                }\r\n\r\n                delete content[uuid];\r\n            }\r\n        }\r\n\r\n        return {\r\n            receive: receive\r\n        };\r\n    }\r\n\r\n    // TextSender.js\r\n    var TextSender = {\r\n        send: function(config) {\r\n            var connection = config.connection;\r\n\r\n            var channel = config.channel,\r\n                remoteUserId = config.remoteUserId,\r\n                initialText = config.text,\r\n                packetSize = connection.chunkSize || 1000,\r\n                textToTransfer = '',\r\n                isobject = false;\r\n\r\n            if (!isString(initialText)) {\r\n                isobject = true;\r\n                initialText = JSON.stringify(initialText);\r\n            }\r\n\r\n            // uuid is used to uniquely identify sending instance\r\n            var uuid = getRandomString();\r\n            var sendingTime = new Date().getTime();\r\n\r\n            sendText(initialText);\r\n\r\n            function sendText(textMessage, text) {\r\n                var data = {\r\n                    type: 'text',\r\n                    uuid: uuid,\r\n                    sendingTime: sendingTime\r\n                };\r\n\r\n                if (textMessage) {\r\n                    text = textMessage;\r\n                    data.packets = parseInt(text.length / packetSize);\r\n                }\r\n\r\n                if (text.length > packetSize) {\r\n                    data.message = text.slice(0, packetSize);\r\n                } else {\r\n                    data.message = text;\r\n                    data.last = true;\r\n                    data.isobject = isobject;\r\n                }\r\n\r\n                channel.send(data, remoteUserId);\r\n\r\n                textToTransfer = text.slice(data.message.length);\r\n\r\n                if (textToTransfer.length) {\r\n                    setTimeout(function() {\r\n                        sendText(null, textToTransfer);\r\n                    }, connection.chunkInterval || 100);\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    // FileProgressBarHandler.js\r\n\r\n    var FileProgressBarHandler = (function() {\r\n        function handle(connection) {\r\n            var progressHelper = {};\r\n\r\n            // www.RTCMultiConnection.org/docs/onFileStart/\r\n            connection.onFileStart = function(file) {\r\n                var div = document.createElement('div');\r\n                div.title = file.name;\r\n                div.innerHTML = '<label>0%</label> <progress></progress>';\r\n\r\n                if (file.remoteUserId) {\r\n                    div.innerHTML += ' (Sharing with:' + file.remoteUserId + ')';\r\n                }\r\n\r\n                if (!connection.filesContainer) {\r\n                    connection.filesContainer = document.body || document.documentElement;\r\n                }\r\n\r\n                connection.filesContainer.insertBefore(div, connection.filesContainer.firstChild);\r\n\r\n                if (!file.remoteUserId) {\r\n                    progressHelper[file.uuid] = {\r\n                        div: div,\r\n                        progress: div.querySelector('progress'),\r\n                        label: div.querySelector('label')\r\n                    };\r\n                    progressHelper[file.uuid].progress.max = file.maxChunks;\r\n                    return;\r\n                }\r\n\r\n                if (!progressHelper[file.uuid]) {\r\n                    progressHelper[file.uuid] = {};\r\n                }\r\n\r\n                progressHelper[file.uuid][file.remoteUserId] = {\r\n                    div: div,\r\n                    progress: div.querySelector('progress'),\r\n                    label: div.querySelector('label')\r\n                };\r\n                progressHelper[file.uuid][file.remoteUserId].progress.max = file.maxChunks;\r\n            };\r\n\r\n            // www.RTCMultiConnection.org/docs/onFileProgress/\r\n            connection.onFileProgress = function(chunk) {\r\n                var helper = progressHelper[chunk.uuid];\r\n                if (!helper) {\r\n                    return;\r\n                }\r\n                if (chunk.remoteUserId) {\r\n                    helper = progressHelper[chunk.uuid][chunk.remoteUserId];\r\n                    if (!helper) {\r\n                        return;\r\n                    }\r\n                }\r\n\r\n                helper.progress.value = chunk.currentPosition || chunk.maxChunks || helper.progress.max;\r\n                updateLabel(helper.progress, helper.label);\r\n            };\r\n\r\n            // www.RTCMultiConnection.org/docs/onFileEnd/\r\n            connection.onFileEnd = function(file) {\r\n                var helper = progressHelper[file.uuid];\r\n                if (!helper) {\r\n                    console.error('No such progress-helper element exist.', file);\r\n                    return;\r\n                }\r\n\r\n                if (file.remoteUserId) {\r\n                    helper = progressHelper[file.uuid][file.remoteUserId];\r\n                    if (!helper) {\r\n                        return;\r\n                    }\r\n                }\r\n\r\n                var div = helper.div;\r\n                if (file.type.indexOf('image') != -1) {\r\n                    div.innerHTML = '<a href=\"' + file.url + '\" download=\"' + file.name + '\">Download <strong style=\"color:red;\">' + file.name + '</strong> </a><br /><img src=\"' + file.url + '\" title=\"' + file.name + '\" style=\"max-width: 80%;\">';\r\n                } else {\r\n                    div.innerHTML = '<a href=\"' + file.url + '\" download=\"' + file.name + '\">Download <strong style=\"color:red;\">' + file.name + '</strong> </a><br /><iframe src=\"' + file.url + '\" title=\"' + file.name + '\" style=\"width: 80%;border: 0;height: inherit;margin-top:1em;\"></iframe>';\r\n                }\r\n            };\r\n\r\n            function updateLabel(progress, label) {\r\n                if (progress.position === -1) {\r\n                    return;\r\n                }\r\n\r\n                var position = +progress.position.toFixed(2).split('.')[1] || 100;\r\n                label.innerHTML = position + '%';\r\n            }\r\n        }\r\n\r\n        return {\r\n            handle: handle\r\n        };\r\n    })();\r\n\r\n    // TranslationHandler.js\r\n\r\n    var TranslationHandler = (function() {\r\n        function handle(connection) {\r\n            connection.autoTranslateText = false;\r\n            connection.language = 'en';\r\n            connection.googKey = 'AIzaSyCgB5hmFY74WYB-EoWkhr9cAGr6TiTHrEE';\r\n\r\n            // www.RTCMultiConnection.org/docs/Translator/\r\n            connection.Translator = {\r\n                TranslateText: function(text, callback) {\r\n                    // if(location.protocol === 'https:') return callback(text);\r\n\r\n                    var newScript = document.createElement('script');\r\n                    newScript.type = 'text/javascript';\r\n\r\n                    var sourceText = encodeURIComponent(text); // escape\r\n\r\n                    var randomNumber = 'method' + connection.token();\r\n                    window[randomNumber] = function(response) {\r\n                        if (response.data && response.data.translations[0] && callback) {\r\n                            callback(response.data.translations[0].translatedText);\r\n                            return;\r\n                        }\r\n\r\n                        if (response.error && response.error.message === 'Daily Limit Exceeded') {\r\n                            console.error('Text translation failed. Error message: \"Daily Limit Exceeded.\"');\r\n                            return;\r\n                        }\r\n\r\n                        if (response.error) {\r\n                            console.error(response.error.message);\r\n                            return;\r\n                        }\r\n\r\n                        console.error(response);\r\n                    };\r\n\r\n                    var source = 'https://www.googleapis.com/language/translate/v2?key=' + connection.googKey + '&target=' + (connection.language || 'en-US') + '&callback=window.' + randomNumber + '&q=' + sourceText;\r\n                    newScript.src = source;\r\n                    document.getElementsByTagName('head')[0].appendChild(newScript);\r\n                },\r\n                getListOfLanguages: function(callback) {\r\n                    var xhr = new XMLHttpRequest();\r\n                    xhr.onreadystatechange = function() {\r\n                        if (xhr.readyState == XMLHttpRequest.DONE) {\r\n                            var response = JSON.parse(xhr.responseText);\r\n\r\n                            if (response && response.data && response.data.languages) {\r\n                                callback(response.data.languages);\r\n                                return;\r\n                            }\r\n\r\n                            if (response.error && response.error.message === 'Daily Limit Exceeded') {\r\n                                console.error('Text translation failed. Error message: \"Daily Limit Exceeded.\"');\r\n                                return;\r\n                            }\r\n\r\n                            if (response.error) {\r\n                                console.error(response.error.message);\r\n                                return;\r\n                            }\r\n\r\n                            console.error(response);\r\n                        }\r\n                    }\r\n                    var url = 'https://www.googleapis.com/language/translate/v2/languages?key=' + connection.googKey + '&target=en';\r\n                    xhr.open('GET', url, true);\r\n                    xhr.send(null);\r\n                }\r\n            };\r\n        }\r\n\r\n        return {\r\n            handle: handle\r\n        };\r\n    })();\r\n\r\n    // _____________________\r\n    // RTCMultiConnection.js\r\n\r\n    (function(connection) {\r\n        forceOptions = forceOptions || {\r\n            useDefaultDevices: true\r\n        };\r\n\r\n        connection.channel = connection.sessionid = (roomid || location.href.replace(/\\/|:|#|\\?|\\$|\\^|%|\\.|`|~|!|\\+|@|\\[|\\||]|\\|*. /g, '').split('\\n').join('').split('\\r').join('')) + '';\r\n\r\n        var mPeer = new MultiPeers(connection);\r\n\r\n        var preventDuplicateOnStreamEvents = {};\r\n        mPeer.onGettingLocalMedia = function(stream, callback) {\r\n            callback = callback || function() {};\r\n\r\n            if (preventDuplicateOnStreamEvents[stream.streamid]) {\r\n                callback();\r\n                return;\r\n            }\r\n            preventDuplicateOnStreamEvents[stream.streamid] = true;\r\n\r\n            try {\r\n                stream.type = 'local';\r\n            } catch (e) {}\r\n\r\n            connection.setStreamEndHandler(stream);\r\n\r\n            getRMCMediaElement(stream, function(mediaElement) {\r\n                mediaElement.id = stream.streamid;\r\n                mediaElement.muted = true;\r\n                mediaElement.volume = 0;\r\n\r\n                if (connection.attachStreams.indexOf(stream) === -1) {\r\n                    connection.attachStreams.push(stream);\r\n                }\r\n\r\n                if (typeof StreamsHandler !== 'undefined') {\r\n                    StreamsHandler.setHandlers(stream, true, connection);\r\n                }\r\n\r\n                connection.streamEvents[stream.streamid] = {\r\n                    stream: stream,\r\n                    type: 'local',\r\n                    mediaElement: mediaElement,\r\n                    userid: connection.userid,\r\n                    extra: connection.extra,\r\n                    streamid: stream.streamid,\r\n                    isAudioMuted: true\r\n                };\r\n\r\n                try {\r\n                    setHarkEvents(connection, connection.streamEvents[stream.streamid]);\r\n                    setMuteHandlers(connection, connection.streamEvents[stream.streamid]);\r\n\r\n                    connection.onstream(connection.streamEvents[stream.streamid]);\r\n                } catch (e) {\r\n                    //\r\n                }\r\n\r\n                callback();\r\n            }, connection);\r\n        };\r\n\r\n        mPeer.onGettingRemoteMedia = function(stream, remoteUserId) {\r\n            try {\r\n                stream.type = 'remote';\r\n            } catch (e) {}\r\n\r\n            connection.setStreamEndHandler(stream, 'remote-stream');\r\n\r\n            getRMCMediaElement(stream, function(mediaElement) {\r\n                mediaElement.id = stream.streamid;\r\n\r\n                if (typeof StreamsHandler !== 'undefined') {\r\n                    StreamsHandler.setHandlers(stream, false, connection);\r\n                }\r\n\r\n                connection.streamEvents[stream.streamid] = {\r\n                    stream: stream,\r\n                    type: 'remote',\r\n                    userid: remoteUserId,\r\n                    extra: connection.peers[remoteUserId] ? connection.peers[remoteUserId].extra : {},\r\n                    mediaElement: mediaElement,\r\n                    streamid: stream.streamid\r\n                };\r\n\r\n                setMuteHandlers(connection, connection.streamEvents[stream.streamid]);\r\n\r\n                connection.onstream(connection.streamEvents[stream.streamid]);\r\n            }, connection);\r\n        };\r\n\r\n        mPeer.onRemovingRemoteMedia = function(stream, remoteUserId) {\r\n            var streamEvent = connection.streamEvents[stream.streamid];\r\n            if (!streamEvent) {\r\n                streamEvent = {\r\n                    stream: stream,\r\n                    type: 'remote',\r\n                    userid: remoteUserId,\r\n                    extra: connection.peers[remoteUserId] ? connection.peers[remoteUserId].extra : {},\r\n                    streamid: stream.streamid,\r\n                    mediaElement: connection.streamEvents[stream.streamid] ? connection.streamEvents[stream.streamid].mediaElement : null\r\n                };\r\n            }\r\n\r\n            if (connection.peersBackup[streamEvent.userid]) {\r\n                streamEvent.extra = connection.peersBackup[streamEvent.userid].extra;\r\n            }\r\n\r\n            connection.onstreamended(streamEvent);\r\n\r\n            delete connection.streamEvents[stream.streamid];\r\n        };\r\n\r\n        mPeer.onNegotiationNeeded = function(message, remoteUserId, callback) {\r\n            callback = callback || function() {};\r\n\r\n            remoteUserId = remoteUserId || message.remoteUserId;\r\n            message = message || '';\r\n\r\n            // usually a message looks like this\r\n            var messageToDeliver = {\r\n                remoteUserId: remoteUserId,\r\n                message: message,\r\n                sender: connection.userid\r\n            };\r\n\r\n            if (message.remoteUserId && message.message && message.sender) {\r\n                // if a code is manually passing required data\r\n                messageToDeliver = message;\r\n            }\r\n\r\n            connectSocket(function() {\r\n                connection.socket.emit(connection.socketMessageEvent, messageToDeliver, callback);\r\n            });\r\n        };\r\n\r\n        function onUserLeft(remoteUserId) {\r\n            connection.deletePeer(remoteUserId);\r\n        }\r\n\r\n        mPeer.onUserLeft = onUserLeft;\r\n        mPeer.disconnectWith = function(remoteUserId, callback) {\r\n            if (connection.socket) {\r\n                connection.socket.emit('disconnect-with', remoteUserId, callback || function() {});\r\n            }\r\n\r\n            connection.deletePeer(remoteUserId);\r\n        };\r\n\r\n        connection.socketOptions = {\r\n            // 'force new connection': true, // For SocketIO version < 1.0\r\n            // 'forceNew': true, // For SocketIO version >= 1.0\r\n            'transport': 'polling' // fixing transport:unknown issues\r\n        };\r\n\r\n        function connectSocket(connectCallback) {\r\n            connection.socketAutoReConnect = true;\r\n\r\n            if (connection.socket) { // todo: check here readySate/etc. to make sure socket is still opened\r\n                if (connectCallback) {\r\n                    connectCallback(connection.socket);\r\n                }\r\n                return;\r\n            }\r\n\r\n            if (typeof SocketConnection === 'undefined') {\r\n                if (typeof FirebaseConnection !== 'undefined') {\r\n                    window.SocketConnection = FirebaseConnection;\r\n                } else if (typeof PubNubConnection !== 'undefined') {\r\n                    window.SocketConnection = PubNubConnection;\r\n                } else {\r\n                    throw 'SocketConnection.js seems missed.';\r\n                }\r\n            }\r\n\r\n            new SocketConnection(connection, function(s) {\r\n                if (connectCallback) {\r\n                    connectCallback(connection.socket);\r\n                }\r\n            });\r\n        }\r\n\r\n        // 1st paramter is roomid\r\n        // 2rd paramter is a callback function\r\n        connection.openOrJoin = function(roomid, callback) {\r\n            callback = callback || function() {};\r\n\r\n            connection.checkPresence(roomid, function(isRoomExist, roomid) {\r\n                if (isRoomExist) {\r\n                    connection.sessionid = roomid;\r\n\r\n                    var localPeerSdpConstraints = false;\r\n                    var remotePeerSdpConstraints = false;\r\n                    var isOneWay = !!connection.session.oneway;\r\n                    var isDataOnly = isData(connection.session);\r\n\r\n                    remotePeerSdpConstraints = {\r\n                        OfferToReceiveAudio: connection.sdpConstraints.mandatory.OfferToReceiveAudio,\r\n                        OfferToReceiveVideo: connection.sdpConstraints.mandatory.OfferToReceiveVideo\r\n                    }\r\n\r\n                    localPeerSdpConstraints = {\r\n                        OfferToReceiveAudio: isOneWay ? !!connection.session.audio : connection.sdpConstraints.mandatory.OfferToReceiveAudio,\r\n                        OfferToReceiveVideo: isOneWay ? !!connection.session.video || !!connection.session.screen : connection.sdpConstraints.mandatory.OfferToReceiveVideo\r\n                    }\r\n\r\n                    var connectionDescription = {\r\n                        remoteUserId: connection.sessionid,\r\n                        message: {\r\n                            newParticipationRequest: true,\r\n                            isOneWay: isOneWay,\r\n                            isDataOnly: isDataOnly,\r\n                            localPeerSdpConstraints: localPeerSdpConstraints,\r\n                            remotePeerSdpConstraints: remotePeerSdpConstraints\r\n                        },\r\n                        sender: connection.userid\r\n                    };\r\n\r\n                    beforeJoin(connectionDescription.message, function() {\r\n                        joinRoom(connectionDescription, callback);\r\n                    });\r\n                    return;\r\n                }\r\n\r\n                connection.waitingForLocalMedia = true;\r\n                connection.isInitiator = true;\r\n\r\n                connection.sessionid = roomid || connection.sessionid;\r\n\r\n                if (isData(connection.session)) {\r\n                    openRoom(callback);\r\n                    return;\r\n                }\r\n\r\n                connection.captureUserMedia(function() {\r\n                    openRoom(callback);\r\n                });\r\n            });\r\n        };\r\n\r\n        // don't allow someone to join this person until he has the media\r\n        connection.waitingForLocalMedia = false;\r\n\r\n        connection.open = function(roomid, callback) {\r\n            callback = callback || function() {};\r\n\r\n            connection.waitingForLocalMedia = true;\r\n            connection.isInitiator = true;\r\n\r\n            connection.sessionid = roomid || connection.sessionid;\r\n\r\n            connectSocket(function() {\r\n                if (isData(connection.session)) {\r\n                    openRoom(callback);\r\n                    return;\r\n                }\r\n\r\n                connection.captureUserMedia(function() {\r\n                    openRoom(callback);\r\n                });\r\n            });\r\n        };\r\n\r\n        // this object keeps extra-data records for all connected users\r\n        // this object is never cleared so you can always access extra-data even if a user left\r\n        connection.peersBackup = {};\r\n\r\n        connection.deletePeer = function(remoteUserId) {\r\n            if (!remoteUserId || !connection.peers[remoteUserId]) {\r\n                return;\r\n            }\r\n\r\n            var eventObject = {\r\n                userid: remoteUserId,\r\n                extra: connection.peers[remoteUserId] ? connection.peers[remoteUserId].extra : {}\r\n            };\r\n\r\n            if (connection.peersBackup[eventObject.userid]) {\r\n                eventObject.extra = connection.peersBackup[eventObject.userid].extra;\r\n            }\r\n\r\n            connection.onleave(eventObject);\r\n\r\n            if (!!connection.peers[remoteUserId]) {\r\n                connection.peers[remoteUserId].streams.forEach(function(stream) {\r\n                    stream.stop();\r\n                });\r\n\r\n                var peer = connection.peers[remoteUserId].peer;\r\n                if (peer && peer.iceConnectionState !== 'closed') {\r\n                    try {\r\n                        peer.close();\r\n                    } catch (e) {}\r\n                }\r\n\r\n                if (connection.peers[remoteUserId]) {\r\n                    connection.peers[remoteUserId].peer = null;\r\n                    delete connection.peers[remoteUserId];\r\n                }\r\n            }\r\n        }\r\n\r\n        connection.rejoin = function(connectionDescription) {\r\n            if (connection.isInitiator || !connectionDescription || !Object.keys(connectionDescription).length) {\r\n                return;\r\n            }\r\n\r\n            var extra = {};\r\n\r\n            if (connection.peers[connectionDescription.remoteUserId]) {\r\n                extra = connection.peers[connectionDescription.remoteUserId].extra;\r\n                connection.deletePeer(connectionDescription.remoteUserId);\r\n            }\r\n\r\n            if (connectionDescription && connectionDescription.remoteUserId) {\r\n                connection.join(connectionDescription.remoteUserId);\r\n\r\n                connection.onReConnecting({\r\n                    userid: connectionDescription.remoteUserId,\r\n                    extra: extra\r\n                });\r\n            }\r\n        };\r\n\r\n        connection.join = function(remoteUserId, options) {\r\n            connection.sessionid = (remoteUserId ? remoteUserId.sessionid || remoteUserId.remoteUserId || remoteUserId : false) || connection.sessionid;\r\n            connection.sessionid += '';\r\n\r\n            var localPeerSdpConstraints = false;\r\n            var remotePeerSdpConstraints = false;\r\n            var isOneWay = false;\r\n            var isDataOnly = false;\r\n\r\n            if ((remoteUserId && remoteUserId.session) || !remoteUserId || typeof remoteUserId === 'string') {\r\n                var session = remoteUserId ? remoteUserId.session || connection.session : connection.session;\r\n\r\n                isOneWay = !!session.oneway;\r\n                isDataOnly = isData(session);\r\n\r\n                remotePeerSdpConstraints = {\r\n                    OfferToReceiveAudio: connection.sdpConstraints.mandatory.OfferToReceiveAudio,\r\n                    OfferToReceiveVideo: connection.sdpConstraints.mandatory.OfferToReceiveVideo\r\n                };\r\n\r\n                localPeerSdpConstraints = {\r\n                    OfferToReceiveAudio: isOneWay ? !!connection.session.audio : connection.sdpConstraints.mandatory.OfferToReceiveAudio,\r\n                    OfferToReceiveVideo: isOneWay ? !!connection.session.video || !!connection.session.screen : connection.sdpConstraints.mandatory.OfferToReceiveVideo\r\n                };\r\n            }\r\n\r\n            options = options || {};\r\n\r\n            var cb = function() {};\r\n            if (typeof options === 'function') {\r\n                cb = options;\r\n                options = {};\r\n            }\r\n\r\n            if (typeof options.localPeerSdpConstraints !== 'undefined') {\r\n                localPeerSdpConstraints = options.localPeerSdpConstraints;\r\n            }\r\n\r\n            if (typeof options.remotePeerSdpConstraints !== 'undefined') {\r\n                remotePeerSdpConstraints = options.remotePeerSdpConstraints;\r\n            }\r\n\r\n            if (typeof options.isOneWay !== 'undefined') {\r\n                isOneWay = options.isOneWay;\r\n            }\r\n\r\n            if (typeof options.isDataOnly !== 'undefined') {\r\n                isDataOnly = options.isDataOnly;\r\n            }\r\n\r\n            var connectionDescription = {\r\n                remoteUserId: connection.sessionid,\r\n                message: {\r\n                    newParticipationRequest: true,\r\n                    isOneWay: isOneWay,\r\n                    isDataOnly: isDataOnly,\r\n                    localPeerSdpConstraints: localPeerSdpConstraints,\r\n                    remotePeerSdpConstraints: remotePeerSdpConstraints\r\n                },\r\n                sender: connection.userid\r\n            };\r\n\r\n            beforeJoin(connectionDescription.message, function() {\r\n                connectSocket(function() {\r\n                    joinRoom(connectionDescription, cb);\r\n                });\r\n            });\r\n            return connectionDescription;\r\n        };\r\n\r\n        function joinRoom(connectionDescription, cb) {\r\n            connection.socket.emit('join-room', {\r\n                sessionid: connection.sessionid,\r\n                session: connection.session,\r\n                mediaConstraints: connection.mediaConstraints,\r\n                sdpConstraints: connection.sdpConstraints,\r\n                streams: getStreamInfoForAdmin(),\r\n                extra: connection.extra,\r\n                password: typeof connection.password !== 'undefined' && typeof connection.password !== 'object' ? connection.password : ''\r\n            }, function(isRoomJoined, error) {\r\n                if (isRoomJoined === true) {\r\n                    if (connection.enableLogs) {\r\n                        console.log('isRoomJoined: ', isRoomJoined, ' roomid: ', connection.sessionid);\r\n                    }\r\n\r\n                    if (!!connection.peers[connection.sessionid]) {\r\n                        // on socket disconnect & reconnect\r\n                        return;\r\n                    }\r\n\r\n                    mPeer.onNegotiationNeeded(connectionDescription);\r\n                }\r\n\r\n                if (isRoomJoined === false) {\r\n                    if (connection.enableLogs) {\r\n                        console.warn('isRoomJoined: ', error, ' roomid: ', connection.sessionid);\r\n                    }\r\n\r\n                    // [disabled] retry after 3 seconds\r\n                    false && setTimeout(function() {\r\n                        joinRoom(connectionDescription, cb);\r\n                    }, 3000);\r\n                }\r\n\r\n                cb(isRoomJoined, connection.sessionid, error);\r\n            });\r\n        }\r\n\r\n        connection.publicRoomIdentifier = '';\r\n\r\n        function openRoom(callback) {\r\n            if (connection.enableLogs) {\r\n                console.log('Sending open-room signal to socket.io');\r\n            }\r\n\r\n            connection.waitingForLocalMedia = false;\r\n            connection.socket.emit('open-room', {\r\n                sessionid: connection.sessionid,\r\n                session: connection.session,\r\n                mediaConstraints: connection.mediaConstraints,\r\n                sdpConstraints: connection.sdpConstraints,\r\n                streams: getStreamInfoForAdmin(),\r\n                extra: connection.extra,\r\n                identifier: connection.publicRoomIdentifier,\r\n                password: typeof connection.password !== 'undefined' && typeof connection.password !== 'object' ? connection.password : ''\r\n            }, function(isRoomOpened, error) {\r\n                if (isRoomOpened === true) {\r\n                    if (connection.enableLogs) {\r\n                        console.log('isRoomOpened: ', isRoomOpened, ' roomid: ', connection.sessionid);\r\n                    }\r\n                    callback(isRoomOpened, connection.sessionid);\r\n                }\r\n\r\n                if (isRoomOpened === false) {\r\n                    if (connection.enableLogs) {\r\n                        console.warn('isRoomOpened: ', error, ' roomid: ', connection.sessionid);\r\n                    }\r\n\r\n                    callback(isRoomOpened, connection.sessionid, error);\r\n                }\r\n            });\r\n        }\r\n\r\n        function getStreamInfoForAdmin() {\r\n            try {\r\n                return connection.streamEvents.selectAll('local').map(function(event) {\r\n                    return {\r\n                        streamid: event.streamid,\r\n                        tracks: event.stream.getTracks().length\r\n                    };\r\n                });\r\n            } catch (e) {\r\n                return [];\r\n            }\r\n        }\r\n\r\n        function beforeJoin(userPreferences, callback) {\r\n            if (connection.dontCaptureUserMedia || userPreferences.isDataOnly) {\r\n                callback();\r\n                return;\r\n            }\r\n\r\n            var localMediaConstraints = {};\r\n\r\n            if (userPreferences.localPeerSdpConstraints.OfferToReceiveAudio) {\r\n                localMediaConstraints.audio = connection.mediaConstraints.audio;\r\n            }\r\n\r\n            if (userPreferences.localPeerSdpConstraints.OfferToReceiveVideo) {\r\n                localMediaConstraints.video = connection.mediaConstraints.video;\r\n            }\r\n\r\n            var session = userPreferences.session || connection.session;\r\n\r\n            if (session.oneway && session.audio !== 'two-way' && session.video !== 'two-way' && session.screen !== 'two-way') {\r\n                callback();\r\n                return;\r\n            }\r\n\r\n            if (session.oneway && session.audio && session.audio === 'two-way') {\r\n                session = {\r\n                    audio: true\r\n                };\r\n            }\r\n\r\n            if (session.audio || session.video || session.screen) {\r\n                if (session.screen) {\r\n                    if (DetectRTC.browser.name === 'Edge') {\r\n                        navigator.getDisplayMedia({\r\n                            video: true,\r\n                            audio: isAudioPlusTab(connection)\r\n                        }).then(function(screen) {\r\n                            screen.isScreen = true;\r\n                            mPeer.onGettingLocalMedia(screen);\r\n\r\n                            if ((session.audio || session.video) && !isAudioPlusTab(connection)) {\r\n                                connection.invokeGetUserMedia(null, callback);\r\n                            } else {\r\n                                callback(screen);\r\n                            }\r\n                        }, function(error) {\r\n                            console.error('Unable to capture screen on Edge. HTTPs and version 17+ is required.');\r\n                        });\r\n                    } else {\r\n                        connection.invokeGetUserMedia({\r\n                            audio: isAudioPlusTab(connection),\r\n                            video: true,\r\n                            isScreen: true\r\n                        }, (session.audio || session.video) && !isAudioPlusTab(connection) ? connection.invokeGetUserMedia(null, callback) : callback);\r\n                    }\r\n                } else if (session.audio || session.video) {\r\n                    connection.invokeGetUserMedia(null, callback, session);\r\n                }\r\n            }\r\n        }\r\n\r\n        connection.getUserMedia = connection.captureUserMedia = function(callback, sessionForced) {\r\n            callback = callback || function() {};\r\n            var session = sessionForced || connection.session;\r\n\r\n            if (connection.dontCaptureUserMedia || isData(session)) {\r\n                callback();\r\n                return;\r\n            }\r\n\r\n            if (session.audio || session.video || session.screen) {\r\n                if (session.screen) {\r\n                    if (DetectRTC.browser.name === 'Edge') {\r\n                        navigator.getDisplayMedia({\r\n                            video: true,\r\n                            audio: isAudioPlusTab(connection)\r\n                        }).then(function(screen) {\r\n                            screen.isScreen = true;\r\n                            mPeer.onGettingLocalMedia(screen);\r\n\r\n                            if ((session.audio || session.video) && !isAudioPlusTab(connection)) {\r\n                                var nonScreenSession = {};\r\n                                for (var s in session) {\r\n                                    if (s !== 'screen') {\r\n                                        nonScreenSession[s] = session[s];\r\n                                    }\r\n                                }\r\n                                connection.invokeGetUserMedia(sessionForced, callback, nonScreenSession);\r\n                                return;\r\n                            }\r\n                            callback(screen);\r\n                        }, function(error) {\r\n                            console.error('Unable to capture screen on Edge. HTTPs and version 17+ is required.');\r\n                        });\r\n                    } else {\r\n                        connection.invokeGetUserMedia({\r\n                            audio: isAudioPlusTab(connection),\r\n                            video: true,\r\n                            isScreen: true\r\n                        }, function(stream) {\r\n                            if ((session.audio || session.video) && !isAudioPlusTab(connection)) {\r\n                                var nonScreenSession = {};\r\n                                for (var s in session) {\r\n                                    if (s !== 'screen') {\r\n                                        nonScreenSession[s] = session[s];\r\n                                    }\r\n                                }\r\n                                connection.invokeGetUserMedia(sessionForced, callback, nonScreenSession);\r\n                                return;\r\n                            }\r\n                            callback(stream);\r\n                        });\r\n                    }\r\n                } else if (session.audio || session.video) {\r\n                    connection.invokeGetUserMedia(sessionForced, callback, session);\r\n                }\r\n            }\r\n        };\r\n\r\n        connection.onbeforeunload = function(arg1, dontCloseSocket) {\r\n            if (!connection.closeBeforeUnload) {\r\n                return;\r\n            }\r\n\r\n            connection.peers.getAllParticipants().forEach(function(participant) {\r\n                mPeer.onNegotiationNeeded({\r\n                    userLeft: true\r\n                }, participant);\r\n\r\n                if (connection.peers[participant] && connection.peers[participant].peer) {\r\n                    connection.peers[participant].peer.close();\r\n                }\r\n\r\n                delete connection.peers[participant];\r\n            });\r\n\r\n            if (!dontCloseSocket) {\r\n                connection.closeSocket();\r\n            }\r\n\r\n            connection.isInitiator = false;\r\n        };\r\n\r\n        if (!window.ignoreBeforeUnload) {\r\n            // user can implement its own version of window.onbeforeunload\r\n            connection.closeBeforeUnload = true;\r\n            window.addEventListener('beforeunload', connection.onbeforeunload, false);\r\n        } else {\r\n            connection.closeBeforeUnload = false;\r\n        }\r\n\r\n        connection.userid = getRandomString();\r\n        connection.changeUserId = function(newUserId, callback) {\r\n            callback = callback || function() {};\r\n            connection.userid = newUserId || getRandomString();\r\n            connection.socket.emit('changed-uuid', connection.userid, callback);\r\n        };\r\n\r\n        connection.extra = {};\r\n        connection.attachStreams = [];\r\n\r\n        connection.session = {\r\n            audio: true,\r\n            video: true\r\n        };\r\n\r\n        connection.enableFileSharing = false;\r\n\r\n        // all values in kbps\r\n        connection.bandwidth = {\r\n            screen: false,\r\n            audio: false,\r\n            video: false\r\n        };\r\n\r\n        connection.codecs = {\r\n            audio: 'opus',\r\n            video: 'VP9'\r\n        };\r\n\r\n        connection.processSdp = function(sdp) {\r\n            // ignore SDP modification if unified-pan is supported\r\n            if (isUnifiedPlanSupportedDefault()) {\r\n                return sdp;\r\n            }\r\n\r\n            if (DetectRTC.browser.name === 'Safari') {\r\n                return sdp;\r\n            }\r\n\r\n            if (connection.codecs.video.toUpperCase() === 'VP8') {\r\n                sdp = CodecsHandler.preferCodec(sdp, 'vp8');\r\n            }\r\n\r\n            if (connection.codecs.video.toUpperCase() === 'VP9') {\r\n                sdp = CodecsHandler.preferCodec(sdp, 'vp9');\r\n            }\r\n\r\n            if (connection.codecs.video.toUpperCase() === 'H264') {\r\n                sdp = CodecsHandler.preferCodec(sdp, 'h264');\r\n            }\r\n\r\n            if (connection.codecs.audio === 'G722') {\r\n                sdp = CodecsHandler.removeNonG722(sdp);\r\n            }\r\n\r\n            if (DetectRTC.browser.name === 'Firefox') {\r\n                return sdp;\r\n            }\r\n\r\n            if (connection.bandwidth.video || connection.bandwidth.screen) {\r\n                sdp = CodecsHandler.setApplicationSpecificBandwidth(sdp, connection.bandwidth, !!connection.session.screen);\r\n            }\r\n\r\n            if (connection.bandwidth.video) {\r\n                sdp = CodecsHandler.setVideoBitrates(sdp, {\r\n                    min: connection.bandwidth.video * 8 * 1024,\r\n                    max: connection.bandwidth.video * 8 * 1024\r\n                });\r\n            }\r\n\r\n            if (connection.bandwidth.audio) {\r\n                sdp = CodecsHandler.setOpusAttributes(sdp, {\r\n                    maxaveragebitrate: connection.bandwidth.audio * 8 * 1024,\r\n                    maxplaybackrate: connection.bandwidth.audio * 8 * 1024,\r\n                    stereo: 1,\r\n                    maxptime: 3\r\n                });\r\n            }\r\n\r\n            return sdp;\r\n        };\r\n\r\n        if (typeof CodecsHandler !== 'undefined') {\r\n            connection.BandwidthHandler = connection.CodecsHandler = CodecsHandler;\r\n        }\r\n\r\n        connection.mediaConstraints = {\r\n            audio: {\r\n                mandatory: {},\r\n                optional: connection.bandwidth.audio ? [{\r\n                    bandwidth: connection.bandwidth.audio * 8 * 1024 || 128 * 8 * 1024\r\n                }] : []\r\n            },\r\n            video: {\r\n                mandatory: {},\r\n                optional: connection.bandwidth.video ? [{\r\n                    bandwidth: connection.bandwidth.video * 8 * 1024 || 128 * 8 * 1024\r\n                }, {\r\n                    facingMode: 'user'\r\n                }] : [{\r\n                    facingMode: 'user'\r\n                }]\r\n            }\r\n        };\r\n\r\n        if (DetectRTC.browser.name === 'Firefox') {\r\n            connection.mediaConstraints = {\r\n                audio: true,\r\n                video: true\r\n            };\r\n        }\r\n\r\n        if (!forceOptions.useDefaultDevices && !DetectRTC.isMobileDevice) {\r\n            DetectRTC.load(function() {\r\n                var lastAudioDevice, lastVideoDevice;\r\n                // it will force RTCMultiConnection to capture last-devices\r\n                // i.e. if external microphone is attached to system, we should prefer it over built-in devices.\r\n                DetectRTC.MediaDevices.forEach(function(device) {\r\n                    if (device.kind === 'audioinput' && connection.mediaConstraints.audio !== false) {\r\n                        lastAudioDevice = device;\r\n                    }\r\n\r\n                    if (device.kind === 'videoinput' && connection.mediaConstraints.video !== false) {\r\n                        lastVideoDevice = device;\r\n                    }\r\n                });\r\n\r\n                if (lastAudioDevice) {\r\n                    if (DetectRTC.browser.name === 'Firefox') {\r\n                        if (connection.mediaConstraints.audio !== true) {\r\n                            connection.mediaConstraints.audio.deviceId = lastAudioDevice.id;\r\n                        } else {\r\n                            connection.mediaConstraints.audio = {\r\n                                deviceId: lastAudioDevice.id\r\n                            }\r\n                        }\r\n                        return;\r\n                    }\r\n\r\n                    if (connection.mediaConstraints.audio == true) {\r\n                        connection.mediaConstraints.audio = {\r\n                            mandatory: {},\r\n                            optional: []\r\n                        }\r\n                    }\r\n\r\n                    if (!connection.mediaConstraints.audio.optional) {\r\n                        connection.mediaConstraints.audio.optional = [];\r\n                    }\r\n\r\n                    var optional = [{\r\n                        sourceId: lastAudioDevice.id\r\n                    }];\r\n\r\n                    connection.mediaConstraints.audio.optional = optional.concat(connection.mediaConstraints.audio.optional);\r\n                }\r\n\r\n                if (lastVideoDevice) {\r\n                    if (DetectRTC.browser.name === 'Firefox') {\r\n                        if (connection.mediaConstraints.video !== true) {\r\n                            connection.mediaConstraints.video.deviceId = lastVideoDevice.id;\r\n                        } else {\r\n                            connection.mediaConstraints.video = {\r\n                                deviceId: lastVideoDevice.id\r\n                            }\r\n                        }\r\n                        return;\r\n                    }\r\n\r\n                    if (connection.mediaConstraints.video == true) {\r\n                        connection.mediaConstraints.video = {\r\n                            mandatory: {},\r\n                            optional: []\r\n                        }\r\n                    }\r\n\r\n                    if (!connection.mediaConstraints.video.optional) {\r\n                        connection.mediaConstraints.video.optional = [];\r\n                    }\r\n\r\n                    var optional = [{\r\n                        sourceId: lastVideoDevice.id\r\n                    }];\r\n\r\n                    connection.mediaConstraints.video.optional = optional.concat(connection.mediaConstraints.video.optional);\r\n                }\r\n            });\r\n        }\r\n\r\n        connection.sdpConstraints = {\r\n            mandatory: {\r\n                OfferToReceiveAudio: true,\r\n                OfferToReceiveVideo: true\r\n            },\r\n            optional: [{\r\n                VoiceActivityDetection: false\r\n            }]\r\n        };\r\n\r\n        connection.sdpSemantics = null; // \"unified-plan\" or \"plan-b\", ref: webrtc.org/web-apis/chrome/unified-plan/\r\n        connection.iceCandidatePoolSize = null; // 0\r\n        connection.bundlePolicy = null; // max-bundle\r\n        connection.rtcpMuxPolicy = null; // \"require\" or \"negotiate\"\r\n        connection.iceTransportPolicy = null; // \"relay\" or \"all\"\r\n        connection.optionalArgument = {\r\n            optional: [{\r\n                DtlsSrtpKeyAgreement: true\r\n            }, {\r\n                googImprovedWifiBwe: true\r\n            }, {\r\n                googScreencastMinBitrate: 300\r\n            }, {\r\n                googIPv6: true\r\n            }, {\r\n                googDscp: true\r\n            }, {\r\n                googCpuUnderuseThreshold: 55\r\n            }, {\r\n                googCpuOveruseThreshold: 85\r\n            }, {\r\n                googSuspendBelowMinBitrate: true\r\n            }, {\r\n                googCpuOveruseDetection: true\r\n            }],\r\n            mandatory: {}\r\n        };\r\n\r\n        connection.iceServers = IceServersHandler.getIceServers(connection);\r\n\r\n        connection.candidates = {\r\n            host: true,\r\n            stun: true,\r\n            turn: true\r\n        };\r\n\r\n        connection.iceProtocols = {\r\n            tcp: true,\r\n            udp: true\r\n        };\r\n\r\n        // EVENTs\r\n        connection.onopen = function(event) {\r\n            if (!!connection.enableLogs) {\r\n                console.info('Data connection has been opened between you & ', event.userid);\r\n            }\r\n        };\r\n\r\n        connection.onclose = function(event) {\r\n            if (!!connection.enableLogs) {\r\n                console.warn('Data connection has been closed between you & ', event.userid);\r\n            }\r\n        };\r\n\r\n        connection.onerror = function(error) {\r\n            if (!!connection.enableLogs) {\r\n                console.error(error.userid, 'data-error', error);\r\n            }\r\n        };\r\n\r\n        connection.onmessage = function(event) {\r\n            if (!!connection.enableLogs) {\r\n                console.debug('data-message', event.userid, event.data);\r\n            }\r\n        };\r\n\r\n        connection.send = function(data, remoteUserId) {\r\n            connection.peers.send(data, remoteUserId);\r\n        };\r\n\r\n        connection.close = connection.disconnect = connection.leave = function() {\r\n            connection.onbeforeunload(false, true);\r\n        };\r\n\r\n        connection.closeEntireSession = function(callback) {\r\n            callback = callback || function() {};\r\n            connection.socket.emit('close-entire-session', function looper() {\r\n                if (connection.getAllParticipants().length) {\r\n                    setTimeout(looper, 100);\r\n                    return;\r\n                }\r\n\r\n                connection.onEntireSessionClosed({\r\n                    sessionid: connection.sessionid,\r\n                    userid: connection.userid,\r\n                    extra: connection.extra\r\n                });\r\n\r\n                connection.changeUserId(null, function() {\r\n                    connection.close();\r\n                    callback();\r\n                });\r\n            });\r\n        };\r\n\r\n        connection.onEntireSessionClosed = function(event) {\r\n            if (!connection.enableLogs) return;\r\n            console.info('Entire session is closed: ', event.sessionid, event.extra);\r\n        };\r\n\r\n        connection.onstream = function(e) {\r\n            var parentNode = connection.videosContainer;\r\n            parentNode.insertBefore(e.mediaElement, parentNode.firstChild);\r\n            var played = e.mediaElement.play();\r\n\r\n            if (typeof played !== 'undefined') {\r\n                played.catch(function() {\r\n                    /*** iOS 11 doesn't allow automatic play and rejects ***/\r\n                }).then(function() {\r\n                    setTimeout(function() {\r\n                        e.mediaElement.play();\r\n                    }, 2000);\r\n                });\r\n                return;\r\n            }\r\n\r\n            setTimeout(function() {\r\n                e.mediaElement.play();\r\n            }, 2000);\r\n        };\r\n\r\n        connection.onstreamended = function(e) {\r\n            if (!e.mediaElement) {\r\n                e.mediaElement = document.getElementById(e.streamid);\r\n            }\r\n\r\n            if (!e.mediaElement || !e.mediaElement.parentNode) {\r\n                return;\r\n            }\r\n\r\n            e.mediaElement.parentNode.removeChild(e.mediaElement);\r\n        };\r\n\r\n        connection.direction = 'many-to-many';\r\n\r\n        connection.removeStream = function(streamid, remoteUserId) {\r\n            var stream;\r\n            connection.attachStreams.forEach(function(localStream) {\r\n                if (localStream.id === streamid) {\r\n                    stream = localStream;\r\n                }\r\n            });\r\n\r\n            if (!stream) {\r\n                console.warn('No such stream exist.', streamid);\r\n                return;\r\n            }\r\n\r\n            connection.peers.getAllParticipants().forEach(function(participant) {\r\n                if (remoteUserId && participant !== remoteUserId) {\r\n                    return;\r\n                }\r\n\r\n                var user = connection.peers[participant];\r\n                try {\r\n                    user.peer.removeStream(stream);\r\n                } catch (e) {}\r\n            });\r\n\r\n            connection.renegotiate();\r\n        };\r\n\r\n        connection.addStream = function(session, remoteUserId) {\r\n            if (!!session.getTracks) {\r\n                if (connection.attachStreams.indexOf(session) === -1) {\r\n                    if (!session.streamid) {\r\n                        session.streamid = session.id;\r\n                    }\r\n\r\n                    connection.attachStreams.push(session);\r\n                }\r\n                connection.renegotiate(remoteUserId);\r\n                return;\r\n            }\r\n\r\n            if (isData(session)) {\r\n                connection.renegotiate(remoteUserId);\r\n                return;\r\n            }\r\n\r\n            if (session.audio || session.video || session.screen) {\r\n                if (session.screen) {\r\n                    if (DetectRTC.browser.name === 'Edge') {\r\n                        navigator.getDisplayMedia({\r\n                            video: true,\r\n                            audio: isAudioPlusTab(connection)\r\n                        }).then(function(screen) {\r\n                            screen.isScreen = true;\r\n                            mPeer.onGettingLocalMedia(screen);\r\n\r\n                            if ((session.audio || session.video) && !isAudioPlusTab(connection)) {\r\n                                connection.invokeGetUserMedia(null, function(stream) {\r\n                                    gumCallback(stream);\r\n                                });\r\n                            } else {\r\n                                gumCallback(screen);\r\n                            }\r\n                        }, function(error) {\r\n                            console.error('Unable to capture screen on Edge. HTTPs and version 17+ is required.');\r\n                        });\r\n                    } else {\r\n                        connection.invokeGetUserMedia({\r\n                            audio: isAudioPlusTab(connection),\r\n                            video: true,\r\n                            isScreen: true\r\n                        }, function(stream) {\r\n                            if ((session.audio || session.video) && !isAudioPlusTab(connection)) {\r\n                                connection.invokeGetUserMedia(null, function(stream) {\r\n                                    gumCallback(stream);\r\n                                });\r\n                            } else {\r\n                                gumCallback(stream);\r\n                            }\r\n                        });\r\n                    }\r\n                } else if (session.audio || session.video) {\r\n                    connection.invokeGetUserMedia(null, gumCallback);\r\n                }\r\n            }\r\n\r\n            function gumCallback(stream) {\r\n                if (session.streamCallback) {\r\n                    session.streamCallback(stream);\r\n                }\r\n\r\n                connection.renegotiate(remoteUserId);\r\n            }\r\n        };\r\n\r\n        connection.invokeGetUserMedia = function(localMediaConstraints, callback, session) {\r\n            if (!session) {\r\n                session = connection.session;\r\n            }\r\n\r\n            if (!localMediaConstraints) {\r\n                localMediaConstraints = connection.mediaConstraints;\r\n            }\r\n\r\n            getUserMediaHandler({\r\n                onGettingLocalMedia: function(stream) {\r\n                    var videoConstraints = localMediaConstraints.video;\r\n                    if (videoConstraints) {\r\n                        if (videoConstraints.mediaSource || videoConstraints.mozMediaSource) {\r\n                            stream.isScreen = true;\r\n                        } else if (videoConstraints.mandatory && videoConstraints.mandatory.chromeMediaSource) {\r\n                            stream.isScreen = true;\r\n                        }\r\n                    }\r\n\r\n                    if (!stream.isScreen) {\r\n                        stream.isVideo = !!getTracks(stream, 'video').length;\r\n                        stream.isAudio = !stream.isVideo && getTracks(stream, 'audio').length;\r\n                    }\r\n\r\n                    mPeer.onGettingLocalMedia(stream, function() {\r\n                        if (typeof callback === 'function') {\r\n                            callback(stream);\r\n                        }\r\n                    });\r\n                },\r\n                onLocalMediaError: function(error, constraints) {\r\n                    mPeer.onLocalMediaError(error, constraints);\r\n                },\r\n                localMediaConstraints: localMediaConstraints || {\r\n                    audio: session.audio ? localMediaConstraints.audio : false,\r\n                    video: session.video ? localMediaConstraints.video : false\r\n                }\r\n            });\r\n        };\r\n\r\n        function applyConstraints(stream, mediaConstraints) {\r\n            if (!stream) {\r\n                if (!!connection.enableLogs) {\r\n                    console.error('No stream to applyConstraints.');\r\n                }\r\n                return;\r\n            }\r\n\r\n            if (mediaConstraints.audio) {\r\n                getTracks(stream, 'audio').forEach(function(track) {\r\n                    track.applyConstraints(mediaConstraints.audio);\r\n                });\r\n            }\r\n\r\n            if (mediaConstraints.video) {\r\n                getTracks(stream, 'video').forEach(function(track) {\r\n                    track.applyConstraints(mediaConstraints.video);\r\n                });\r\n            }\r\n        }\r\n\r\n        connection.applyConstraints = function(mediaConstraints, streamid) {\r\n            if (!MediaStreamTrack || !MediaStreamTrack.prototype.applyConstraints) {\r\n                alert('track.applyConstraints is NOT supported in your browser.');\r\n                return;\r\n            }\r\n\r\n            if (streamid) {\r\n                var stream;\r\n                if (connection.streamEvents[streamid]) {\r\n                    stream = connection.streamEvents[streamid].stream;\r\n                }\r\n                applyConstraints(stream, mediaConstraints);\r\n                return;\r\n            }\r\n\r\n            connection.attachStreams.forEach(function(stream) {\r\n                applyConstraints(stream, mediaConstraints);\r\n            });\r\n        };\r\n\r\n        function replaceTrack(track, remoteUserId, isVideoTrack) {\r\n            if (remoteUserId) {\r\n                mPeer.replaceTrack(track, remoteUserId, isVideoTrack);\r\n                return;\r\n            }\r\n\r\n            connection.peers.getAllParticipants().forEach(function(participant) {\r\n                mPeer.replaceTrack(track, participant, isVideoTrack);\r\n            });\r\n        }\r\n\r\n        connection.replaceTrack = function(session, remoteUserId, isVideoTrack) {\r\n            session = session || {};\r\n\r\n            if (!RTCPeerConnection.prototype.getSenders) {\r\n                connection.addStream(session);\r\n                return;\r\n            }\r\n\r\n            if (session instanceof MediaStreamTrack) {\r\n                replaceTrack(session, remoteUserId, isVideoTrack);\r\n                return;\r\n            }\r\n\r\n            if (session instanceof MediaStream) {\r\n                if (getTracks(session, 'video').length) {\r\n                    replaceTrack(getTracks(session, 'video')[0], remoteUserId, true);\r\n                }\r\n\r\n                if (getTracks(session, 'audio').length) {\r\n                    replaceTrack(getTracks(session, 'audio')[0], remoteUserId, false);\r\n                }\r\n                return;\r\n            }\r\n\r\n            if (isData(session)) {\r\n                throw 'connection.replaceTrack requires audio and/or video and/or screen.';\r\n                return;\r\n            }\r\n\r\n            if (session.audio || session.video || session.screen) {\r\n                if (session.screen) {\r\n                    if (DetectRTC.browser.name === 'Edge') {\r\n                        navigator.getDisplayMedia({\r\n                            video: true,\r\n                            audio: isAudioPlusTab(connection)\r\n                        }).then(function(screen) {\r\n                            screen.isScreen = true;\r\n                            mPeer.onGettingLocalMedia(screen);\r\n\r\n                            if ((session.audio || session.video) && !isAudioPlusTab(connection)) {\r\n                                connection.invokeGetUserMedia(null, gumCallback);\r\n                            } else {\r\n                                gumCallback(screen);\r\n                            }\r\n                        }, function(error) {\r\n                            console.error('Unable to capture screen on Edge. HTTPs and version 17+ is required.');\r\n                        });\r\n                    } else {\r\n                        connection.invokeGetUserMedia({\r\n                            audio: isAudioPlusTab(connection),\r\n                            video: true,\r\n                            isScreen: true\r\n                        }, (session.audio || session.video) && !isAudioPlusTab(connection) ? connection.invokeGetUserMedia(null, gumCallback) : gumCallback);\r\n                    }\r\n                } else if (session.audio || session.video) {\r\n                    connection.invokeGetUserMedia(null, gumCallback);\r\n                }\r\n            }\r\n\r\n            function gumCallback(stream) {\r\n                connection.replaceTrack(stream, remoteUserId, isVideoTrack || session.video || session.screen);\r\n            }\r\n        };\r\n\r\n        connection.resetTrack = function(remoteUsersIds, isVideoTrack) {\r\n            if (!remoteUsersIds) {\r\n                remoteUsersIds = connection.getAllParticipants();\r\n            }\r\n\r\n            if (typeof remoteUsersIds == 'string') {\r\n                remoteUsersIds = [remoteUsersIds];\r\n            }\r\n\r\n            remoteUsersIds.forEach(function(participant) {\r\n                var peer = connection.peers[participant].peer;\r\n\r\n                if ((typeof isVideoTrack === 'undefined' || isVideoTrack === true) && peer.lastVideoTrack) {\r\n                    connection.replaceTrack(peer.lastVideoTrack, participant, true);\r\n                }\r\n\r\n                if ((typeof isVideoTrack === 'undefined' || isVideoTrack === false) && peer.lastAudioTrack) {\r\n                    connection.replaceTrack(peer.lastAudioTrack, participant, false);\r\n                }\r\n            });\r\n        };\r\n\r\n        connection.renegotiate = function(remoteUserId) {\r\n            if (remoteUserId) {\r\n                mPeer.renegotiatePeer(remoteUserId);\r\n                return;\r\n            }\r\n\r\n            connection.peers.getAllParticipants().forEach(function(participant) {\r\n                mPeer.renegotiatePeer(participant);\r\n            });\r\n        };\r\n\r\n        connection.setStreamEndHandler = function(stream, isRemote) {\r\n            if (!stream || !stream.addEventListener) return;\r\n\r\n            isRemote = !!isRemote;\r\n\r\n            if (stream.alreadySetEndHandler) {\r\n                return;\r\n            }\r\n            stream.alreadySetEndHandler = true;\r\n\r\n            var streamEndedEvent = 'ended';\r\n\r\n            if ('oninactive' in stream) {\r\n                streamEndedEvent = 'inactive';\r\n            }\r\n\r\n            stream.addEventListener(streamEndedEvent, function() {\r\n                if (stream.idInstance) {\r\n                    currentUserMediaRequest.remove(stream.idInstance);\r\n                }\r\n\r\n                if (!isRemote) {\r\n                    // reset attachStreams\r\n                    var streams = [];\r\n                    connection.attachStreams.forEach(function(s) {\r\n                        if (s.id != stream.id) {\r\n                            streams.push(s);\r\n                        }\r\n                    });\r\n                    connection.attachStreams = streams;\r\n                }\r\n\r\n                // connection.renegotiate();\r\n\r\n                var streamEvent = connection.streamEvents[stream.streamid];\r\n                if (!streamEvent) {\r\n                    streamEvent = {\r\n                        stream: stream,\r\n                        streamid: stream.streamid,\r\n                        type: isRemote ? 'remote' : 'local',\r\n                        userid: connection.userid,\r\n                        extra: connection.extra,\r\n                        mediaElement: connection.streamEvents[stream.streamid] ? connection.streamEvents[stream.streamid].mediaElement : null\r\n                    };\r\n                }\r\n\r\n                if (isRemote && connection.peers[streamEvent.userid]) {\r\n                    // reset remote \"streams\"\r\n                    var peer = connection.peers[streamEvent.userid].peer;\r\n                    var streams = [];\r\n                    peer.getRemoteStreams().forEach(function(s) {\r\n                        if (s.id != stream.id) {\r\n                            streams.push(s);\r\n                        }\r\n                    });\r\n                    connection.peers[streamEvent.userid].streams = streams;\r\n                }\r\n\r\n                if (streamEvent.userid === connection.userid && streamEvent.type === 'remote') {\r\n                    return;\r\n                }\r\n\r\n                if (connection.peersBackup[streamEvent.userid]) {\r\n                    streamEvent.extra = connection.peersBackup[streamEvent.userid].extra;\r\n                }\r\n\r\n                connection.onstreamended(streamEvent);\r\n\r\n                delete connection.streamEvents[stream.streamid];\r\n            }, false);\r\n        };\r\n\r\n        connection.onMediaError = function(error, constraints) {\r\n            if (!!connection.enableLogs) {\r\n                console.error(error, constraints);\r\n            }\r\n        };\r\n\r\n        connection.autoCloseEntireSession = false;\r\n\r\n        connection.filesContainer = connection.videosContainer = document.body || document.documentElement;\r\n        connection.isInitiator = false;\r\n\r\n        connection.shareFile = mPeer.shareFile;\r\n        if (typeof FileProgressBarHandler !== 'undefined') {\r\n            FileProgressBarHandler.handle(connection);\r\n        }\r\n\r\n        if (typeof TranslationHandler !== 'undefined') {\r\n            TranslationHandler.handle(connection);\r\n        }\r\n\r\n        connection.token = getRandomString;\r\n\r\n        connection.onNewParticipant = function(participantId, userPreferences) {\r\n            connection.acceptParticipationRequest(participantId, userPreferences);\r\n        };\r\n\r\n        connection.acceptParticipationRequest = function(participantId, userPreferences) {\r\n            if (userPreferences.successCallback) {\r\n                userPreferences.successCallback();\r\n                delete userPreferences.successCallback;\r\n            }\r\n\r\n            mPeer.createNewPeer(participantId, userPreferences);\r\n        };\r\n\r\n        if (typeof StreamsHandler !== 'undefined') {\r\n            connection.StreamsHandler = StreamsHandler;\r\n        }\r\n\r\n        connection.onleave = function(userid) {};\r\n\r\n        connection.invokeSelectFileDialog = function(callback) {\r\n            var selector = new FileSelector();\r\n            selector.accept = '*.*';\r\n            selector.selectSingleFile(callback);\r\n        };\r\n\r\n        connection.onmute = function(e) {\r\n            if (!e || !e.mediaElement) {\r\n                return;\r\n            }\r\n\r\n            if (e.muteType === 'both' || e.muteType === 'video') {\r\n                e.mediaElement.src = null;\r\n                var paused = e.mediaElement.pause();\r\n                if (typeof paused !== 'undefined') {\r\n                    paused.then(function() {\r\n                        e.mediaElement.poster = e.snapshot || 'https://cdn.webrtc-experiment.com/images/muted.png';\r\n                    });\r\n                } else {\r\n                    e.mediaElement.poster = e.snapshot || 'https://cdn.webrtc-experiment.com/images/muted.png';\r\n                }\r\n            } else if (e.muteType === 'audio') {\r\n                e.mediaElement.muted = true;\r\n            }\r\n        };\r\n\r\n        connection.onunmute = function(e) {\r\n            if (!e || !e.mediaElement || !e.stream) {\r\n                return;\r\n            }\r\n\r\n            if (e.unmuteType === 'both' || e.unmuteType === 'video') {\r\n                e.mediaElement.poster = null;\r\n                e.mediaElement.srcObject = e.stream;\r\n                e.mediaElement.play();\r\n            } else if (e.unmuteType === 'audio') {\r\n                e.mediaElement.muted = false;\r\n            }\r\n        };\r\n\r\n        connection.onExtraDataUpdated = function(event) {\r\n            event.status = 'online';\r\n            connection.onUserStatusChanged(event, true);\r\n        };\r\n\r\n        connection.getAllParticipants = function(sender) {\r\n            return connection.peers.getAllParticipants(sender);\r\n        };\r\n\r\n        if (typeof StreamsHandler !== 'undefined') {\r\n            StreamsHandler.onSyncNeeded = function(streamid, action, type) {\r\n                connection.peers.getAllParticipants().forEach(function(participant) {\r\n                    mPeer.onNegotiationNeeded({\r\n                        streamid: streamid,\r\n                        action: action,\r\n                        streamSyncNeeded: true,\r\n                        type: type || 'both'\r\n                    }, participant);\r\n                });\r\n            };\r\n        }\r\n\r\n        connection.connectSocket = function(callback) {\r\n            connectSocket(callback);\r\n        };\r\n\r\n        connection.closeSocket = function() {\r\n            try {\r\n                io.sockets = {};\r\n            } catch (e) {};\r\n\r\n            if (!connection.socket) return;\r\n\r\n            if (typeof connection.socket.disconnect === 'function') {\r\n                connection.socket.disconnect();\r\n            }\r\n\r\n            if (typeof connection.socket.resetProps === 'function') {\r\n                connection.socket.resetProps();\r\n            }\r\n\r\n            connection.socket = null;\r\n        };\r\n\r\n        connection.getSocket = function(callback) {\r\n            if (!callback && connection.enableLogs) {\r\n                console.warn('getSocket.callback paramter is required.');\r\n            }\r\n\r\n            callback = callback || function() {};\r\n\r\n            if (!connection.socket) {\r\n                connectSocket(function() {\r\n                    callback(connection.socket);\r\n                });\r\n            } else {\r\n                callback(connection.socket);\r\n            }\r\n\r\n            return connection.socket; // callback is preferred over return-statement\r\n        };\r\n\r\n        connection.getRemoteStreams = mPeer.getRemoteStreams;\r\n\r\n        var skipStreams = ['selectFirst', 'selectAll', 'forEach'];\r\n\r\n        connection.streamEvents = {\r\n            selectFirst: function(options) {\r\n                return connection.streamEvents.selectAll(options)[0];\r\n            },\r\n            selectAll: function(options) {\r\n                if (!options) {\r\n                    // default will always be all streams\r\n                    options = {\r\n                        local: true,\r\n                        remote: true,\r\n                        isScreen: true,\r\n                        isAudio: true,\r\n                        isVideo: true\r\n                    };\r\n                }\r\n\r\n                if (options == 'local') {\r\n                    options = {\r\n                        local: true\r\n                    };\r\n                }\r\n\r\n                if (options == 'remote') {\r\n                    options = {\r\n                        remote: true\r\n                    };\r\n                }\r\n\r\n                if (options == 'screen') {\r\n                    options = {\r\n                        isScreen: true\r\n                    };\r\n                }\r\n\r\n                if (options == 'audio') {\r\n                    options = {\r\n                        isAudio: true\r\n                    };\r\n                }\r\n\r\n                if (options == 'video') {\r\n                    options = {\r\n                        isVideo: true\r\n                    };\r\n                }\r\n\r\n                var streams = [];\r\n                Object.keys(connection.streamEvents).forEach(function(key) {\r\n                    var event = connection.streamEvents[key];\r\n\r\n                    if (skipStreams.indexOf(key) !== -1) return;\r\n                    var ignore = true;\r\n\r\n                    if (options.local && event.type === 'local') {\r\n                        ignore = false;\r\n                    }\r\n\r\n                    if (options.remote && event.type === 'remote') {\r\n                        ignore = false;\r\n                    }\r\n\r\n                    if (options.isScreen && event.stream.isScreen) {\r\n                        ignore = false;\r\n                    }\r\n\r\n                    if (options.isVideo && event.stream.isVideo) {\r\n                        ignore = false;\r\n                    }\r\n\r\n                    if (options.isAudio && event.stream.isAudio) {\r\n                        ignore = false;\r\n                    }\r\n\r\n                    if (options.userid && event.userid === options.userid) {\r\n                        ignore = false;\r\n                    }\r\n\r\n                    if (ignore === false) {\r\n                        streams.push(event);\r\n                    }\r\n                });\r\n\r\n                return streams;\r\n            }\r\n        };\r\n\r\n        connection.socketURL = '/'; // generated via config.json\r\n        connection.socketMessageEvent = 'RTCMultiConnection-Message'; // generated via config.json\r\n        connection.socketCustomEvent = 'RTCMultiConnection-Custom-Message'; // generated via config.json\r\n        connection.DetectRTC = DetectRTC;\r\n\r\n        connection.setCustomSocketEvent = function(customEvent) {\r\n            if (customEvent) {\r\n                connection.socketCustomEvent = customEvent;\r\n            }\r\n\r\n            if (!connection.socket) {\r\n                return;\r\n            }\r\n\r\n            connection.socket.emit('set-custom-socket-event-listener', connection.socketCustomEvent);\r\n        };\r\n\r\n        connection.getNumberOfBroadcastViewers = function(broadcastId, callback) {\r\n            if (!connection.socket || !broadcastId || !callback) return;\r\n\r\n            connection.socket.emit('get-number-of-users-in-specific-broadcast', broadcastId, callback);\r\n        };\r\n\r\n        connection.onNumberOfBroadcastViewersUpdated = function(event) {\r\n            if (!connection.enableLogs || !connection.isInitiator) return;\r\n            console.info('Number of broadcast (', event.broadcastId, ') viewers', event.numberOfBroadcastViewers);\r\n        };\r\n\r\n        connection.onUserStatusChanged = function(event, dontWriteLogs) {\r\n            if (!!connection.enableLogs && !dontWriteLogs) {\r\n                console.info(event.userid, event.status);\r\n            }\r\n        };\r\n\r\n        connection.getUserMediaHandler = getUserMediaHandler;\r\n        connection.multiPeersHandler = mPeer;\r\n        connection.enableLogs = true;\r\n        connection.setCustomSocketHandler = function(customSocketHandler) {\r\n            if (typeof SocketConnection !== 'undefined') {\r\n                SocketConnection = customSocketHandler;\r\n            }\r\n        };\r\n\r\n        // default value should be 15k because [old]Firefox's receiving limit is 16k!\r\n        // however 64k works chrome-to-chrome\r\n        connection.chunkSize = 40 * 1000;\r\n\r\n        connection.maxParticipantsAllowed = 1000;\r\n\r\n        // eject or leave single user\r\n        connection.disconnectWith = mPeer.disconnectWith;\r\n\r\n        // check if room exist on server\r\n        // we will pass roomid to the server and wait for callback (i.e. server's response)\r\n        connection.checkPresence = function(roomid, callback) {\r\n            roomid = roomid || connection.sessionid;\r\n\r\n            if (SocketConnection.name === 'SSEConnection') {\r\n                SSEConnection.checkPresence(roomid, function(isRoomExist, _roomid, extra) {\r\n                    if (!connection.socket) {\r\n                        if (!isRoomExist) {\r\n                            connection.userid = _roomid;\r\n                        }\r\n\r\n                        connection.connectSocket(function() {\r\n                            callback(isRoomExist, _roomid, extra);\r\n                        });\r\n                        return;\r\n                    }\r\n                    callback(isRoomExist, _roomid);\r\n                });\r\n                return;\r\n            }\r\n\r\n            if (!connection.socket) {\r\n                connection.connectSocket(function() {\r\n                    connection.checkPresence(roomid, callback);\r\n                });\r\n                return;\r\n            }\r\n\r\n            connection.socket.emit('check-presence', roomid + '', function(isRoomExist, _roomid, extra) {\r\n                if (connection.enableLogs) {\r\n                    console.log('checkPresence.isRoomExist: ', isRoomExist, ' roomid: ', _roomid);\r\n                }\r\n                callback(isRoomExist, _roomid, extra);\r\n            });\r\n        };\r\n\r\n        connection.onReadyForOffer = function(remoteUserId, userPreferences) {\r\n            connection.multiPeersHandler.createNewPeer(remoteUserId, userPreferences);\r\n        };\r\n\r\n        connection.setUserPreferences = function(userPreferences) {\r\n            if (connection.dontAttachStream) {\r\n                userPreferences.dontAttachLocalStream = true;\r\n            }\r\n\r\n            if (connection.dontGetRemoteStream) {\r\n                userPreferences.dontGetRemoteStream = true;\r\n            }\r\n\r\n            return userPreferences;\r\n        };\r\n\r\n        connection.updateExtraData = function() {\r\n            connection.socket.emit('extra-data-updated', connection.extra);\r\n        };\r\n\r\n        connection.enableScalableBroadcast = false;\r\n        connection.maxRelayLimitPerUser = 3; // each broadcast should serve only 3 users\r\n\r\n        connection.dontCaptureUserMedia = false;\r\n        connection.dontAttachStream = false;\r\n        connection.dontGetRemoteStream = false;\r\n\r\n        connection.onReConnecting = function(event) {\r\n            if (connection.enableLogs) {\r\n                console.info('ReConnecting with', event.userid, '...');\r\n            }\r\n        };\r\n\r\n        connection.beforeAddingStream = function(stream) {\r\n            return stream;\r\n        };\r\n\r\n        connection.beforeRemovingStream = function(stream) {\r\n            return stream;\r\n        };\r\n\r\n        if (typeof isChromeExtensionAvailable !== 'undefined') {\r\n            connection.checkIfChromeExtensionAvailable = isChromeExtensionAvailable;\r\n        }\r\n\r\n        if (typeof isFirefoxExtensionAvailable !== 'undefined') {\r\n            connection.checkIfChromeExtensionAvailable = isFirefoxExtensionAvailable;\r\n        }\r\n\r\n        if (typeof getChromeExtensionStatus !== 'undefined') {\r\n            connection.getChromeExtensionStatus = getChromeExtensionStatus;\r\n        }\r\n\r\n        connection.modifyScreenConstraints = function(screen_constraints) {\r\n            return screen_constraints;\r\n        };\r\n\r\n        connection.onPeerStateChanged = function(state) {\r\n            if (connection.enableLogs) {\r\n                if (state.iceConnectionState.search(/closed|failed/gi) !== -1) {\r\n                    console.error('Peer connection is closed between you & ', state.userid, state.extra, 'state:', state.iceConnectionState);\r\n                }\r\n            }\r\n        };\r\n\r\n        connection.isOnline = true;\r\n\r\n        listenEventHandler('online', function() {\r\n            connection.isOnline = true;\r\n        });\r\n\r\n        listenEventHandler('offline', function() {\r\n            connection.isOnline = false;\r\n        });\r\n\r\n        connection.isLowBandwidth = false;\r\n        if (navigator && navigator.connection && navigator.connection.type) {\r\n            connection.isLowBandwidth = navigator.connection.type.toString().toLowerCase().search(/wifi|cell/g) !== -1;\r\n            if (connection.isLowBandwidth) {\r\n                connection.bandwidth = {\r\n                    audio: false,\r\n                    video: false,\r\n                    screen: false\r\n                };\r\n\r\n                if (connection.mediaConstraints.audio && connection.mediaConstraints.audio.optional && connection.mediaConstraints.audio.optional.length) {\r\n                    var newArray = [];\r\n                    connection.mediaConstraints.audio.optional.forEach(function(opt) {\r\n                        if (typeof opt.bandwidth === 'undefined') {\r\n                            newArray.push(opt);\r\n                        }\r\n                    });\r\n                    connection.mediaConstraints.audio.optional = newArray;\r\n                }\r\n\r\n                if (connection.mediaConstraints.video && connection.mediaConstraints.video.optional && connection.mediaConstraints.video.optional.length) {\r\n                    var newArray = [];\r\n                    connection.mediaConstraints.video.optional.forEach(function(opt) {\r\n                        if (typeof opt.bandwidth === 'undefined') {\r\n                            newArray.push(opt);\r\n                        }\r\n                    });\r\n                    connection.mediaConstraints.video.optional = newArray;\r\n                }\r\n            }\r\n        }\r\n\r\n        connection.getExtraData = function(remoteUserId, callback) {\r\n            if (!remoteUserId) throw 'remoteUserId is required.';\r\n\r\n            if (typeof callback === 'function') {\r\n                connection.socket.emit('get-remote-user-extra-data', remoteUserId, function(extra, remoteUserId, error) {\r\n                    callback(extra, remoteUserId, error);\r\n                });\r\n                return;\r\n            }\r\n\r\n            if (!connection.peers[remoteUserId]) {\r\n                if (connection.peersBackup[remoteUserId]) {\r\n                    return connection.peersBackup[remoteUserId].extra;\r\n                }\r\n                return {};\r\n            }\r\n\r\n            return connection.peers[remoteUserId].extra;\r\n        };\r\n\r\n        if (!!forceOptions.autoOpenOrJoin) {\r\n            connection.openOrJoin(connection.sessionid);\r\n        }\r\n\r\n        connection.onUserIdAlreadyTaken = function(useridAlreadyTaken, yourNewUserId) {\r\n            // via #683\r\n            connection.close();\r\n            connection.closeSocket();\r\n\r\n            connection.isInitiator = false;\r\n            connection.userid = connection.token();\r\n\r\n            connection.join(connection.sessionid);\r\n\r\n            if (connection.enableLogs) {\r\n                console.warn('Userid already taken.', useridAlreadyTaken, 'Your new userid:', connection.userid);\r\n            }\r\n        };\r\n\r\n        connection.trickleIce = true;\r\n        connection.version = '3.6.9';\r\n\r\n        connection.onSettingLocalDescription = function(event) {\r\n            if (connection.enableLogs) {\r\n                console.info('Set local description for remote user', event.userid);\r\n            }\r\n        };\r\n\r\n        connection.resetScreen = function() {\r\n            sourceId = null;\r\n            if (DetectRTC && DetectRTC.screen) {\r\n                delete DetectRTC.screen.sourceId;\r\n            }\r\n\r\n            currentUserMediaRequest = {\r\n                streams: [],\r\n                mutex: false,\r\n                queueRequests: []\r\n            };\r\n        };\r\n\r\n        // if disabled, \"event.mediaElement\" for \"onstream\" will be NULL\r\n        connection.autoCreateMediaElement = true;\r\n\r\n        // set password\r\n        connection.password = null;\r\n\r\n        // set password\r\n        connection.setPassword = function(password, callback) {\r\n            callback = callback || function() {};\r\n            if (connection.socket) {\r\n                connection.socket.emit('set-password', password, callback);\r\n            } else {\r\n                connection.password = password;\r\n                callback(true, connection.sessionid, null);\r\n            }\r\n        };\r\n\r\n        connection.onSocketDisconnect = function(event) {\r\n            if (connection.enableLogs) {\r\n                console.warn('socket.io connection is closed');\r\n            }\r\n        };\r\n\r\n        connection.onSocketError = function(event) {\r\n            if (connection.enableLogs) {\r\n                console.warn('socket.io connection is failed');\r\n            }\r\n        };\r\n\r\n        // error messages\r\n        connection.errors = {\r\n            ROOM_NOT_AVAILABLE: 'Room not available',\r\n            INVALID_PASSWORD: 'Invalid password',\r\n            USERID_NOT_AVAILABLE: 'User ID does not exist',\r\n            ROOM_PERMISSION_DENIED: 'Room permission denied',\r\n            ROOM_FULL: 'Room full',\r\n            DID_NOT_JOIN_ANY_ROOM: 'Did not join any room yet',\r\n            INVALID_SOCKET: 'Invalid socket',\r\n            PUBLIC_IDENTIFIER_MISSING: 'publicRoomIdentifier is required',\r\n            INVALID_ADMIN_CREDENTIAL: 'Invalid username or password attempted'\r\n        };\r\n    })(this);\r\n\r\n};\r\n\r\nif (typeof module !== 'undefined' /* && !!module.exports*/ ) {\r\n    module.exports = exports = RTCMultiConnection;\r\n}\r\n\r\nif (typeof define === 'function' && define.amd) {\r\n    define('RTCMultiConnection', [], function() {\r\n        return RTCMultiConnection;\r\n    });\r\n}\n","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',[_c('h1',[_vm._v(\"This is the title screen\")]),_c('a',{on:{\"click\":_vm.startBattleMode}},[_vm._v(\"Battle Mode\")]),_c('br'),_c('a',{on:{\"click\":_vm.startPartyMode}},[_vm._v(\"Party Mode\")])])}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","\n\n\n\n\n\n\n\n\n\n\nimport setGameMode, { GAME_MODE_BATTLE, GAME_MODE_PARTY, GameSettings } from \"../common/GameSettings\";\nimport router from '../router';\n//import {io} from \"socket.io\";\n\nexport default {\n  name: \"title-screen\",\n  mounted() {\n    //const io = require('socket.io');\n    const RTCMultiConnection = require('rtcmulticonnection');\n    \n    var connection = new RTCMultiConnection();\n    // this line is VERY_important\n    connection.socketURL = 'https://rtcmulticonnection.herokuapp.com:443/';\n    // if you want audio+video conferencing\n    connection.session = {\n        audio: true,\n        video: true\n    };\n\n    connection.openOrJoin('your-room-id');\n  },\n  methods: {\n    startBattleMode()\n    {\n      GameSettings.SetupBattleModeGame();\n      router.push(\"intro-screen\");\n    },\n    startPartyMode()\n    {\n      GameSettings.SetupPartyModeGame();\n      router.push(\"intro-screen\");\n    }\n  }\n}\n","import mod from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--13-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/ts-loader/index.js??ref--13-3!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./TitleScreen.vue?vue&type=script&lang=ts&\"; export default mod; export * from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--13-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/ts-loader/index.js??ref--13-3!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./TitleScreen.vue?vue&type=script&lang=ts&\"","import { render, staticRenderFns } from \"./TitleScreen.vue?vue&type=template&id=12f2f83e&\"\nimport script from \"./TitleScreen.vue?vue&type=script&lang=ts&\"\nexport * from \"./TitleScreen.vue?vue&type=script&lang=ts&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n"],"sourceRoot":""}